{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference . Example \u00b6 Example log from GameSense . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs 16x Left 3x Space 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions 1x /game_metadata 1x /bind_game_event 8x /register_game_event 4692x /multiple_game_events 29x /game_heartbeat","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference .","title":"Welcome to SharpLog"},{"location":"#example","text":"Example log from GameSense . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs 16x Left 3x Space 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions 1x /game_metadata 1x /bind_game_event 8x /register_game_event 4692x /multiple_game_events 29x /game_heartbeat","title":"Example"},{"location":"Getting%20started/","text":"Getting started \u00b6 Installation \u00b6 Install the package from nuget . Usage \u00b6 Logger \u00b6 Create a new logger. 1 2 3 4 5 6 7 8 Logger MyLogger = new Logger () { Ident = \"Test\" , LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; Default settings 1 2 3 4 5 Ident = \"NoName\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true Log to the console. 1 MyLogger . Log ( \"Test\" , LoggerType . Debug ); Debug is optional When the level argument is left blank the logger automatically logs on level LoggerType . Debug Output 1 [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test MassLogger \u00b6 This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. 1 2 3 4 5 6 7 8 9 MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings 1 2 3 4 5 6 Ident = \"NoName\" , InfoLogText = \"\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true You can log debug , warning and error just like the normal logger . 1 MyLogger . Log ( \"Test\" , LoggerType . Debug ); Debug is optional Again, when the level argument is left blank the logger automatically logs on level LoggerType . Debug Output 1 [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . 1 MyLogger . Log ( Keyboard . pressedKey (), LoggerType . Info ); Output Every 30000 milliseconds: 1 2 3 4 5 6 7 8 [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: 63x Left 16x Return 39x LShiftKey 12x RShiftKey 39x Back 28x Space 36x LControlKey Note Note that we set InfoLogText as Keyboard inputs: in the constructor. Counter The counters of the logs get reset after every log. When you want to log a info log instantly set the instant argument as true . 1 MyLogger . Log ( \"Instant info\" , LoggerType . Info , true ); Output 1 [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info","title":"Getting started"},{"location":"Getting%20started/#getting-started","text":"","title":"Getting started"},{"location":"Getting%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Getting%20started/#usage","text":"","title":"Usage"},{"location":"Getting%20started/#logger","text":"Create a new logger. 1 2 3 4 5 6 7 8 Logger MyLogger = new Logger () { Ident = \"Test\" , LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; Default settings 1 2 3 4 5 Ident = \"NoName\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true Log to the console. 1 MyLogger . Log ( \"Test\" , LoggerType . Debug ); Debug is optional When the level argument is left blank the logger automatically logs on level LoggerType . Debug Output 1 [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test","title":"Logger"},{"location":"Getting%20started/#masslogger","text":"This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. 1 2 3 4 5 6 7 8 9 MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings 1 2 3 4 5 6 Ident = \"NoName\" , InfoLogText = \"\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true You can log debug , warning and error just like the normal logger . 1 MyLogger . Log ( \"Test\" , LoggerType . Debug ); Debug is optional Again, when the level argument is left blank the logger automatically logs on level LoggerType . Debug Output 1 [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . 1 MyLogger . Log ( Keyboard . pressedKey (), LoggerType . Info ); Output Every 30000 milliseconds: 1 2 3 4 5 6 7 8 [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: 63x Left 16x Return 39x LShiftKey 12x RShiftKey 39x Back 28x Space 36x LControlKey Note Note that we set InfoLogText as Keyboard inputs: in the constructor. Counter The counters of the logs get reset after every log. When you want to log a info log instantly set the instant argument as true . 1 MyLogger . Log ( \"Instant info\" , LoggerType . Info , true ); Output 1 [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info","title":"MassLogger"},{"location":"Reference/Logger/","text":"","title":"Logger"},{"location":"Reference/MassLogger/","text":"","title":"MassLogger"}]}