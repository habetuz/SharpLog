{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SharpLog","text":"<p>A small logger for big projects.</p> <p>Installation and usage under Get started.</p> <p>Full documentation under Reference.</p> <p>This documentation is up to date with version <code>3.6.*</code></p>"},{"location":"#features","title":"Features","text":"<ul> <li> Fast and easy to use</li> <li> No setup required</li> <li> Easy to customize</li> </ul>"},{"location":"#outputs","title":"Outputs","text":"<p>Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs.</p> <p>Some outputs are already provided out-of-the-box:</p> <ul> <li> Print your logs to the standard console including color coding!</li> <li> <p> Print your logs to Spectre.Console.AnsiConsole!</p> </li> <li> <p> Store your logs in a log file without blocking the file!</p> </li> <li> <p> Send your logs via email!</p> </li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>SharpLog.Logging.LogDebug(\"Debug!\");\nSharpLog.Logging.LogTrace(\"Trace!\");\nSharpLog.Logging.LogInfo(\"Info!\");\nSharpLog.Logging.LogWarning(\"Warning!\");\nSharpLog.Logging.LogError(\"Error!\");\nSharpLog.Logging.LogFatal( //(1)\n\"Fatal!\", exception: new Exception(\"Test\"), stackTrace: true;\n</code></pre> <ol> <li> Exits program after logging your message.</li> </ol>"},{"location":"Get%20started/","title":"Get started","text":""},{"location":"Get%20started/#installation","title":"Installation","text":"<p>Install the package from nuget.</p>"},{"location":"Get%20started/#usage","title":"Usage","text":"<p>Sharplog automatically tries to load the settings from <code>sharplog.yml</code>. A Yaml file containing all changes to the default settings you want to make.</p> <p>Read here how you can customize your logger!</p> <p>To log a message just use <code>Logging.log(LogLevel.Debug, \"Your Message\")</code> or a log level specific logging method:</p> Log level specific logging methods<pre><code>Logging.LogDebug(\"Debug!\");\nLogging.LogTrace(\"Trace!\");\nLogging.LogInfo(\"Info!\");\nLogging.LogWarning(\"Warning!\");\nLogging.LogError(\"Error!\");\nLogging.LogFatal(\"Fatal!\");\n</code></pre> <pre><code>18.10.2022 20:31:12: [Debug][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Debug!\n18.10.2022 20:31:12: [Trace][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Trace!\n18.10.2022 20:31:12: [Info][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Info!\n18.10.2022 20:31:12: [Warn][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Warning!\n18.10.2022 20:31:12: [Error][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Error!\n18.10.2022 20:31:12: [Fatal][SharpLogAndGameSenseTest.Program-&gt;Main(...)] Fatal!\n</code></pre> <p>Note that you can pass additional information for your log message:</p> <pre><code>string: tag #(1)\nException: exception #(2)\nbool: stacktrace #(3)\n</code></pre> <ol> <li>The tag of the message to better organize your logs.</li> <li>An exception you want to log.</li> <li>Wether you want to log the stack trace for better a better understanding what happened with your program.</li> </ol>"},{"location":"Get%20started/#exit-your-program-correctly","title":"Exit your program correctly","text":"<p>Warning</p> <p>If you do not exit your program correctly async outputs may not be finished writing or sending your logs!</p> <p>Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it.</p> <p>Dispose the logger to ensure that you wait until all messages are logged before your program exits.</p> Possible ways of disposing the logger<pre><code>Logging.Dispose(); //(1)\nLogging.LogFatal(\"Something went terribly wrong! We cannot continue the program.\"); //(2)\n</code></pre> <ol> <li>Halts the program until all log messages are written.</li> <li>Writes all log messages and then exits the program using <code>Environment.Exit(1)</code></li> </ol>"},{"location":"Customize/","title":"Customize","text":"<p>Either customize your logger by editing the <code>sharplog.yml</code> file or by modifying the <code>SettingsManager.Settings</code> property.</p> <p>One important customization option is the format of your log messages. Read here for more information about formatting.</p>"},{"location":"Customize/#set-global-format","title":"Set global format","text":"<p>The global format gets used when there is no other format is provided.</p> sharplog.ymlC# <pre><code>format: '$D$: [$L$]$Tp{[}s{]}$[$C$-&gt;$F$] $M$$Ep{\\n}i{   }$$Sp{\\n}$$'\n</code></pre> <pre><code>SettingsManager.Settings.Format = \"$D$: [$L$]$Tp{[}s{]}$[$C$-&gt;$F$] $M$$Ep{\\n}i{   }$$Sp{\\n}$\"\n</code></pre>"},{"location":"Customize/#set-the-global-level-settings","title":"Set the global level settings","text":"<p>The global level settings that get used when no other level setting is provided.</p> <p>Tip</p> <p>Instead of providing all logging levels you can only specify the logging levels you want to change.</p> sharplog.ymlC# <pre><code>levels:\ndebug:\nshort: '?' #(1)\nenabled: true\nformat: null\ntrace:\nshort: '&amp;'\nenabled: true #(2)\nformat: null\ninfo:\nshort: '+'\nenabled: true\nformat: null #(3)\nwarn:\nshort: '!'\nenabled: true\nformat: null\nerror:\nshort: 'x'\nenabled: true\nformat: null\nfatal:\nshort: 'X'\nenabled: true\nformat: null\n</code></pre> <ol> <li>The short value is the <code>char</code> representation of the level.</li> <li><code>true</code> if the level is enabled, else <code>false</code>.</li> <li>You can specify level specific formats that override the global format.</li> </ol> <pre><code>SettingsManager.Settings.Levels = new LevelContainer(\ndebug: new Level('?'),\ntrace: new Level('&amp;'),\ninfo: new Level('+'),\nwarn: new Level('!'),\nerror: new Level('x'),\nfatal: new Level('X'));\n</code></pre>"},{"location":"Customize/#set-global-outputs","title":"Set global outputs","text":"<p>The global outputs get used if there is no tag that specifies outputs.</p> <p>Settings specified for an output have the highest priority and overwrite every other defined setting.</p> sharplog.ymlC# <pre><code>outputs:\n- type: ConsoleOutput\n...\n- type: FileOutput\n...\n</code></pre> <pre><code>SettingsManager.Settings.Outputs = new OutputContainer()\n</code></pre>"},{"location":"Customize/#set-a-console-output","title":"Set a console output","text":"sharplog.ymlC# <p>Colors</p> <p><code>black</code> <code>blue</code> <code>cyan</code> <code>darkBlue</code> <code>darkCyan</code> <code>darkGray</code> <code>darkGreen</code> <code>darkMagenta</code> <code>darkRed</code> <code>darkYellow</code> <code>gray</code> <code>green</code> <code>magenta</code> <code>red</code> <code>white</code> <code>yellow</code></p> <pre><code>- type: ConsoleOutput\nlevels: null #(1)\nformat: null #(2)\ncolor_enabled: true #(3)\ncolors: #(4)\ndebug:\nbackground: black #(5)\nforeground: darkGray\ntrace:\nbackground: black\nforeground: white #(6)\ninfo:\nbackground: black\nforeground: green\nwarn:\nbackground: black\nforeground: yellow\nerror:\nbackground: black\nforeground: red\nfatal:\nbackground: red\nforeground: black\n</code></pre> <ol> <li>Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value.</li> <li>A format for the output.</li> <li><code>true</code> if the output should log with color, else <code>false</code>.</li> <li>Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used.</li> <li>The background color. <code>black</code> is \"transparent\".</li> <li>The foreground or font color.</li> </ol> <pre><code>new ConsoleOutput()\n</code></pre>"},{"location":"Customize/#set-a-file-output","title":"Set a file output","text":"sharplog.ymlC# <pre><code>- type: FileOutput\nlevels: null #(1)\nformat: null #(2)\npath: .log #(3)\nsuspend_time: 500 #(4)\n</code></pre> <ol> <li>Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value.</li> <li>A format for the output.</li> <li>The relativ or absolut path of the file the output writes to.</li> <li>The file output logs asynchronously and waits <code>suspend_time</code> milliseconds between checking for new log messages to write.</li> </ol> <pre><code>new FileOutput()\n</code></pre>"},{"location":"Customize/#set-an-email-output","title":"Set an email output","text":"sharplog.ymlC# <pre><code>- type: EmailOutput\nlevels: null\nformat: null\nformat_subject: '[$La{l}$] $C$'\nclient:\nhost: smtp.yourdomain.com\nport: 587\nenable_ssl: true\ncredentials:\nuser_name: yourusername\npassword: yourpassword\nfrom:\ndisplay_name: SharpLog\naddress: sharplog@yourdomain.com\nto:\n- display_name: Your Receiver\naddress: mail@your-receiver.com\nbcc:\n- display_name: Your Receiver\naddress: mail@your-receiver.com\ncc:\n- display_name: Your Receiver\naddress: mail@your-receiver.com\n</code></pre> <pre><code>new EmailOutput()\n{\nClient = new SmtpClient()\n{\nPort = 587,\nHost = \"smtp.yourdomain.com\",\nEnableSsl = true,\nCredentials = new NetworkCredential()\n{\nPassword = \"yourusername\",\nUserName = \"yourpassword\",\n},\n},\nFrom = new MailAddress()\n{\nAddress = \"sharplog@yourdomain.com\",\nDisplayName = \"SharpLog\",\n},\nTo = new MailAddress[]\n{\nnew MailAddress()\n{\nAddress = \"mail@your-receiver.com\",\nDisplayName = \"Your Receiver\",\n},\n},\nBcc = new MailAddress[]\n{\nnew MailAddress()\n{\nAddress = \"mail@your-receiver.com\",\nDisplayName = \"Your Receiver\",\n},\n},\nCc = new MailAddress[]\n{\nnew MailAddress()\n{\nAddress = \"mail@your-receiver.com\",\nDisplayName = \"Your Receiver\",\n},\n},\n};\n</code></pre>"},{"location":"Customize/#log-using-spectreconsole","title":"Log using Spectre.Console","text":"<p>You might want to use AnsiConsoleOutput for a more customizable console output.</p> <p>This output uses <code>AnsiConsole.MarkupLine(log)</code> from Spectre.Console to log to the console. Read more about Spectre.Console markup here.</p> <p>Warning</p> <p>Make sure your log messages or formats do not contain unwanted <code>[...]</code> because they will be interpreted as markdown! You can escape brackets by doubling them (<code>[...]</code> -&gt; <code>[[...]]</code>) or by calling <code>Markup.Escape(yourLogMessage)</code>.</p> sharplog.ymlC# <pre><code>- type: AnsiConsoleOutput\nlevels: null #(1)\nformat: null #(2)\nansi_error_print: false #(3)\n</code></pre> <ol> <li>Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value.</li> <li>A format for the output.</li> <li><code>true</code> if the build in error logging capability of Spectre.Console should be used. Do not specify an exception placeholder if you set this parameter to <code>true</code>, else the error will be logged twice.</li> </ol> <pre><code>new FileOutput()\n</code></pre>"},{"location":"Customize/#set-a-custom-output","title":"Set a custom output","text":"<p>Create a class that extends the <code>Output</code> or <code>AsyncOutput</code> class.</p> SynchronousAsynchronous <pre><code>class CustomOutput : SharpLog.Outputs.Output\n{\npublic override void Write(string formattedLog, Log log)\n{\n//(1)\n}\n}\n</code></pre> <ol> <li>Write the formatted log to your output. The log object contains all the information about the log.</li> </ol> <pre><code>class CustomOutput : SharpLog.Outputs.AsyncOutput\n{\npublic CustomOutput()\n{\nbase.OnStart += (_, _) =&gt; {}; //(2)\nbase.OnDispose += (_, _) =&gt; {}; //(3)\n}\npublic override void WriteNonBlocking((string, Log)[] logs)\n{\n//(1)\n}\n}\n</code></pre> <ol> <li>Write the formatted logs to your output. This method gets called asynchronously.</li> <li>Attach to <code>OnStart</code> for your setup code.</li> <li>Attach to <code>OnDispose</code> for your dispose code. Waiting for your output to finish writing is handled automatically.</li> </ol> <p>Now you have to add the output to an <code>OutputContainer</code>.</p> General outputTag output <pre><code>SettingsManager.Settings.Outputs.Add(new CustomOutput())\n</code></pre> <pre><code>SettingsManager.Settings.Tags[\"YOUR_TAG\"].Outputs.Add(new CustomOutput())\n</code></pre>"},{"location":"Customize/#set-tag-specific-settings","title":"Set tag specific settings","text":"<p>The tag specific settings get used when a matching tag is provided with the log message.</p> <p>These settings overwrite global format, level and output settings.</p> sharplog.ymlC# <pre><code>tags:\nYOUR_TAG:\nenabled: true #(1)\nformat: null\nlevels: null #(2)\noutputs: null\nanotherTag: #(3)\nenabled: true\nformat: null #(4)\nlevels: null\noutputs: null #(5)\n</code></pre> <ol> <li><code>true</code> if the tag is enabled, else <code>false</code></li> <li>Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value.</li> <li>The format of your tag does not matter.</li> <li>A format for the tag.</li> <li>Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them).</li> </ol> <pre><code>SettingsManager.Settings.Tags[\"YOUR_TAG\"] = new Tag();\nSettingsManager.Settings.Tags[\"anotherTag\"] = new Tag();\n</code></pre>"},{"location":"Customize/Default%20settings/","title":"Default settings","text":"sharplog.yml<pre><code>format: \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\"\nlevels:\ndebug:\nenabled: true\nformat:\nshort: \"?\"\ntrace:\nenabled: true\nformat:\nshort: \"&amp;\"\ninfo:\nenabled: true\nformat:\nshort: +\nwarning:\nenabled: true\nformat:\nshort: \"!\"\nerror:\nenabled: true\nformat:\nshort: x\nfatal:\nenabled: true\nformat:\nshort: X\noutputs:\n- type: ConsoleOutput\ncolor_enabled: true\ncolors:\nDebug:\nbackground: Black\nforeground: DarkGray\nTrace:\nbackground: Black\nforeground: White\nInfo:\nbackground: Black\nforeground: Green\nWarning:\nbackground: Black\nforeground: Yellow\nError:\nbackground: Black\nforeground: Red\nFatal:\nbackground: Red\nforeground: Black\nformat:\nlevels:\n- type: FileOutput\npath: .log\nsuspend_time: 500\nformat:\nlevels:\ntags:\nSHARPLOG_INTERNAL:\nenabled: true\nformat:\nlevels:\ndebug:\nenabled: true\nformat:\nshort: \"\\0\"\ntrace:\nenabled: true\nformat:\nshort: \"\\0\"\ninfo:\nenabled: true\nformat:\nshort: \"\\0\"\nwarning:\nerror:\nfatal:\noutputs:\n- type: AnsiConsoleOutput\nansi_error_print: true\nformat:\nlevels:\ndebug:\nenabled: true\nformat: \"[bold gray]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\ntrace:\nenabled: true\nformat: \"[bold white]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\ninfo:\nenabled: true\nformat: \"[bold green]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\nwarning:\nenabled: true\nformat: \"[bold yellow]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\nerror:\nenabled: true\nformat: \"[bold red]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\nfatal:\nenabled: true\nformat: \"[bold white on red]$La{u}r{11, }p{[[}s{]]}$ - [/]$M$$Sp{\\nStackTrace: }$\"\nshort: \"\\0\"\n</code></pre>"},{"location":"Customize/Formatting/","title":"Formatting","text":"<p>Specify the formatting of you logs using a string with placeholders that get replaced with information.</p> <p>A placeholder is build up the following:</p> <pre><code>//(1)                               (4)                       (3)\n$Da{yyyy'-'MM'-'dd'T'HH':'mm':'ss}p{SomePrefix}s{SomeSuffix}$\n//  (2)                                          (5)\n</code></pre> <ol> <li>The capitalized letter specifies the type of the placeholder.</li> <li>The argument property.</li> <li>Each placeholder starts and ends with <code>$</code></li> <li>The prefix property.</li> <li>The suffix property.</li> </ol> <p>Tip</p> <p>To write <code>$</code> to your log write <code>$$</code> in your format string.</p> <p>The following properties are currently available.</p> <p>Note</p> <p>Prefix and suffix properties cannot contain nested placeholders.</p> Property Description <code>p{...}</code> Prefix that will be displayed before of the information. <code>s{...}</code> Suffix that will be displayed after the information. <code>a{...}</code> Arguments that some placeholders need to specify their formatting. <code>i{...}</code> Indentation that will be displayed before every line. <code>l{num,char}</code> Padding left that will be displayed before the prefix <code>r{num,char}</code> Padding right that will be displayed after the suffix <p>The order of suffix, paddings, prefix etc. is the following: indentation</p> <p><code>[pad left][prefix][indentation (each line)][content of placeholder][suffix][pad right]</code></p>"},{"location":"Customize/Formatting/#list-of-placeholders","title":"List of placeholders","text":"Placeholder Description Arguments <code>C</code> The namespace and class of the source. <code>F</code> The source function. <code>l</code> for the whole function definition.<code>s</code> or empty for a short version. <code>D</code> The timestamp. Date and time format string or empty for standard format of your culture. <code>E</code> The exception of the log source if available. <code>L</code> The log level. <code>l</code> or empty for a written log level.<code>u</code> for a written log level in uppercase.<code>s</code> for the short form specified in the level settings. <code>M</code> The message. <code>S</code> The stack trace if available. <code>T</code> The tag if available."},{"location":"Reference/","title":"Reference","text":"<p>Reference for every public function, property and field of <code>SharpLog</code>!</p> <p>Reference up to date!</p> <p> The reference is complete right now with version <code>3.6.*</code>!</p> <p>No missing references.</p>"},{"location":"Reference/Log/","title":"Log Struct","text":""},{"location":"Reference/Log/#definition","title":"Definition","text":"<p><code>namespace Sharplog</code></p> <pre><code>public struct Log\n</code></pre> Object ValueType Log <p>Struct containing all information for a log.</p>"},{"location":"Reference/Log/#constructors","title":"Constructors","text":"Name <code>Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string)</code>"},{"location":"Reference/Log/#properties","title":"Properties","text":"Name Type GET SET <code>Level</code> LogLevel <code>Class</code> Type <code>Function</code> MethodBase <code>Message</code> object <code>Tag</code> string <code>Exception</code> Exception <code>LevelSettings</code> Level <code>Format</code> string <code>Time</code> DateTime <code>StackTrace</code> string"},{"location":"Reference/Log/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Log/#logloglevel-object-type-methodbase-string-exception-level-string-datetime-string","title":"Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string)","text":"<pre><code>public Log(\nLogLevel level, object message, Type @class, MethodBase function,\nstring tag, Exception exception, Level levelSettings, string format, DateTime time, string stackTrace)\n</code></pre> <p>Initializes a new instance of the Log struct.</p>"},{"location":"Reference/Log/#parameter","title":"Parameter","text":"<code>level</code> LogLevel  \u00b7  The level. <code>message</code> object  \u00b7  The message. <code>@class</code> Type  \u00b7  The class. <p><code>function</code> MethodBase  \u00b7       The function.</p> <code>tag</code> string  \u00b7  The tag. <code>exception</code> Exception  \u00b7  The exception. <code>levelSettings</code> Level  \u00b7  The level settings. <code>format</code> string  \u00b7  The format. <code>time</code> DateTime  \u00b7  The time. <code>stackTrace</code> string  \u00b7  The stackTrace."},{"location":"Reference/Log/#properties_1","title":"Properties","text":""},{"location":"Reference/Log/#level","title":"Level","text":"<pre><code>public LogLevel Level { get; set; }\n</code></pre> Type: LogLevel <p>Gets or sets the level of the log.</p>"},{"location":"Reference/Log/#class","title":"Class","text":"<pre><code>public Type Class { get; set; }\n</code></pre> Type: Type <p>Gets or sets the sender type.</p>"},{"location":"Reference/Log/#function","title":"Function","text":"<pre><code>public MethodBase Function { get; set; }\n</code></pre> Type: MethodBase <p>Gets or sets the sender function.</p>"},{"location":"Reference/Log/#message","title":"Message","text":"<pre><code>public object Message { get; set; }\n</code></pre> Type: object <p>Gets or sets the message.</p>"},{"location":"Reference/Log/#tag","title":"Tag","text":"<pre><code>public string Tag { get; set; }\n</code></pre> Type: string <p>Gets or sets the tag.</p>"},{"location":"Reference/Log/#exception","title":"Exception","text":"<pre><code>public Exception Exception { get; set; }\n</code></pre> Type: Exception <p>Gets or sets the exception.</p>"},{"location":"Reference/Log/#format","title":"Format","text":"<pre><code>public string Format { get; set; }\n</code></pre> Type: string <p>Gets or sets the format of the log.</p>"},{"location":"Reference/Log/#levelsettings","title":"LevelSettings","text":"<pre><code>public Level LevelSettings { get; set; }\n</code></pre> Type: Level <p>Gets or sets the level settings.</p>"},{"location":"Reference/Log/#time","title":"Time","text":"<pre><code>public DateTime Time { get; set; }\n</code></pre> Type: DateTime <p>Gets or sets the level settings.</p>"},{"location":"Reference/Log/#stacktrace","title":"StackTrace","text":"<pre><code>public string StackTrace { get; set; }\n</code></pre> Type: DateTime <p>Gets or sets the stack trace.</p>"},{"location":"Reference/LogLevel/","title":"LogLevel Enum","text":""},{"location":"Reference/LogLevel/#definition","title":"Definition","text":"<p><code>namespace Sharplog</code></p> <pre><code>public enum LogLevel\n</code></pre> Object ValueType Enum LogLevel <p>Specifies the log level.</p>"},{"location":"Reference/LogLevel/#fields","title":"Fields","text":"Name Value Description <code>Debug</code> <code>0</code> Level debug <code>Trace</code> <code>1</code> Level trace <code>Info</code> <code>2</code> Level info <code>Warn</code> <code>3</code> Level warning <code>Error</code> <code>4</code> Level error <code>Fatal</code> <code>5</code> Level fatal"},{"location":"Reference/Logging/","title":"Logging Class","text":""},{"location":"Reference/Logging/#definition","title":"Definition","text":"<p><code>namespace Sharplog</code></p> <pre><code>public static class Logging\n</code></pre> Object Logging <p>Class responsible for logging.</p>"},{"location":"Reference/Logging/#methods","title":"Methods","text":"Name Modifiers Returns Initialize() <code>public static</code> Dispose() <code>public static</code> Log(LogLevel, object, string, Exception, bool) <code>public static</code> LogDebug(object, string, Exception, bool) <code>public static</code> LogTrace(object, string, Exception, bool) <code>public static</code> LogInfo(object, string, Exception, bool) <code>public static</code> LogWarning(object, string, Exception, bool) <code>public static</code> LogError(object, string, Exception, bool) <code>public static</code> LogFatal(object, string, Exception, bool) <code>public static</code>"},{"location":"Reference/Logging/#methods_1","title":"Methods","text":""},{"location":"Reference/Logging/#initialize","title":"Initialize()","text":"<pre><code>public static void Initialize()\n</code></pre> <p>Initializes the logger. The logger will automatically initialize itself with the first log function call. Use this function if you want to initialize before you start logging.</p>"},{"location":"Reference/Logging/#dispose","title":"Dispose()","text":"<pre><code>public static void Dispose()\n</code></pre> <p>Releases resources and logs all remaining logs. Should be called before exiting the program.</p>"},{"location":"Reference/Logging/#logloglevel-object-string-exception-bool","title":"Log(LogLevel, object, string, Exception, bool)","text":"<pre><code>public static void Log(\nLogLevel level,\nobject message,\nstring? tag = null,\nException? exception = null,\nbool stackTrace = false)\n</code></pre> <p>Logs a log message.</p>"},{"location":"Reference/Logging/#parameter","title":"Parameter","text":"<code>level</code> LogLevel  \u00b7  The level of the log. <code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#logdebugobject-string-exception-bool","title":"LogDebug(object, string, Exception, bool)","text":"<pre><code>public static void LogDebug(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs a debug log message.</p>"},{"location":"Reference/Logging/#parameter_1","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#logtraceobject-string-exception-bool","title":"LogTrace(object, string, Exception, bool)","text":"<pre><code>public static void LogTrace(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs a trace log message.</p>"},{"location":"Reference/Logging/#parameter_2","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#loginfoobject-string-exception-bool","title":"LogInfo(object, string, Exception, bool)","text":"<pre><code>public static void LogInfo(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs an information log message.</p>"},{"location":"Reference/Logging/#parameter_3","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#logwarningobject-string-exception-bool","title":"LogWarning(object, string, Exception, bool)","text":"<pre><code>public static void LogWarning(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs a warning log message.</p>"},{"location":"Reference/Logging/#parameter_4","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#logerrorobject-string-exception-bool","title":"LogError(object, string, Exception, bool)","text":"<pre><code>public static void LogError(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs an error log message.</p>"},{"location":"Reference/Logging/#parameter_5","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/Logging/#logfatalobject-string-exception-bool","title":"LogFatal(object, string, Exception, bool)","text":"<pre><code>public static void LogFatal(\nobject message,\nstring tag = null, Exception exception = null, bool stackTrace = false)\n</code></pre> <p>Logs a fatal log message and exits the program with code 1.</p>"},{"location":"Reference/Logging/#parameter_6","title":"Parameter","text":"<code>message</code> object  \u00b7  The message of the log. Gets converted to a string using <code>.toString()</code>. <code>tag</code> string  \u00b7  <code>null</code> The tag of the log. <code>exception</code> Exception  \u00b7  <code>null</code> The exception of the log. <code>stackTrace</code> bool  \u00b7  <code>false</code> Wether the log should include the stack trace."},{"location":"Reference/SettingsManager/","title":"SettingsManager Class","text":""},{"location":"Reference/SettingsManager/#definition","title":"Definition","text":"<p><code>namespace Sharplog</code></p> <pre><code>public static class SettingsManager\n</code></pre> Object SettingsManager <p>Class responsible for managing the settings.</p>"},{"location":"Reference/SettingsManager/#properties","title":"Properties","text":"Name Type GET SET Settings BaseSettings"},{"location":"Reference/SettingsManager/#methods","title":"Methods","text":"Name Modifiers Returns ReloadSettings(bool) <code>public static</code>"},{"location":"Reference/SettingsManager/#properties_1","title":"Properties","text":""},{"location":"Reference/SettingsManager/#settings","title":"Settings","text":"<pre><code>public static BaseSettings Settings { get; set; }\n</code></pre> Type: BaseSettings <p>Gets or sets the settings.</p>"},{"location":"Reference/SettingsManager/#methods_1","title":"Methods","text":""},{"location":"Reference/SettingsManager/#reloadsettingsbool","title":"ReloadSettings(bool)","text":"<pre><code>public static void ReloadSettings(bool fromFile = true)\n</code></pre> <p>Reloads the settings.</p>"},{"location":"Reference/SettingsManager/#parameter","title":"Parameter","text":"<code>fromFile</code> bool  \u00b7  <code>true</code> The message of the log. Gets converted to a string using <code>.toString()</code>."},{"location":"Reference/Outputs/","title":"Outputs","text":"<p>The Outputs namespace contains classes and enums containing various outputs for SharpLog.</p>"},{"location":"Reference/Outputs/AnsiConsoleOutput/","title":"AnsiConsoleOutput Class","text":""},{"location":"Reference/Outputs/AnsiConsoleOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public class AnsiConsoleOutput : Output\n</code></pre> Object Output AnsiConsoleOutput <p>Output using Spectre.Console.AnsiConsole.</p>"},{"location":"Reference/Outputs/AnsiConsoleOutput/#constructors","title":"Constructors","text":"Name AnsiConsoleOutput() AnsiConsoleOutput(bool, string?, LevelContainer?)"},{"location":"Reference/Outputs/AnsiConsoleOutput/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer AnsiErrorPrint bool"},{"location":"Reference/Outputs/AnsiConsoleOutput/#inherited-methods","title":"Inherited Methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code>"},{"location":"Reference/Outputs/AnsiConsoleOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/AnsiConsoleOutput/#ansiconsoleoutput","title":"AnsiConsoleOutput()","text":"<pre><code>public AnsiConsoleOutput()\n: this(false, null, null)\n</code></pre> <p>Initializes a new instance of the AnsiConsoleOutput class.</p>"},{"location":"Reference/Outputs/AnsiConsoleOutput/#ansiconsoleoutputbool-string-levelcontainer","title":"AnsiConsoleOutput(bool, string?, LevelContainer?)","text":"<pre><code>public AnsiConsoleOutput(\nbool ansiErrorPrint = false,\nstring? format = null,\nLevelContainer? levels = null)\n</code></pre> <p>Initializes a new instance of the AnsiConsoleOutput class.</p>"},{"location":"Reference/Outputs/AnsiConsoleOutput/#parameter","title":"Parameter","text":"<code>ansiErrorPrint</code> bool \u00b7  <code>false</code> If set to true the build in error logging capability of Spectre.Console.AnsiConsole get used. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/AnsiConsoleOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/AnsiConsoleOutput/#ansierrorprint","title":"AnsiErrorPrint","text":"<pre><code>public bool AnsiErrorPrint { get; set; }\n</code></pre> Type: bool <p>Gets or sets a value indicating wether the build in error logging capability of Spectre.Console.AnsiConsole should be used. Do not specify an error format if you set this parameter to <code>true</code>, else the error will be logged twice.</p>"},{"location":"Reference/Outputs/AsyncOutput/","title":"AsyncOutput Class","text":""},{"location":"Reference/Outputs/AsyncOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public abstract class AsyncOutput : Output, IDisposable\n</code></pre> <p>Object Output AsyncOutput</p> Implements: System.IDisposable <p>Base class for async outputs.</p>"},{"location":"Reference/Outputs/AsyncOutput/#constructors","title":"Constructors","text":"Name AsyncOutput(int, string, LevelContainer)"},{"location":"Reference/Outputs/AsyncOutput/#properties","title":"Properties","text":"Name Type GET SET SuspendTime int Format string Levels LevelContainer"},{"location":"Reference/Outputs/AsyncOutput/#events","title":"Events","text":"Name Delegate Modifiers OnStart EventHandler <code>protected</code> OnDispose EventHandler <code>protected</code>"},{"location":"Reference/Outputs/AsyncOutput/#methods","title":"Methods","text":"Name Modifiers Returns Start() <code>public</code> WriteNonBlocking((string, Log)[]) <code>public abstract</code>"},{"location":"Reference/Outputs/AsyncOutput/#inherited-methods","title":"Inherited methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code> Dispose() <code>public</code>"},{"location":"Reference/Outputs/AsyncOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/AsyncOutput/#asyncoutputint-string-levelcontainer","title":"AsyncOutput(int, string, LevelContainer)","text":"<pre><code>public AsyncOutput(\nint suspendTime = 500,\nstring format = null,\nLevelContainer levels = null)\n: base(format, levels)\n</code></pre> <p>Initializes a new instance of the AsyncOutput class.</p>"},{"location":"Reference/Outputs/AsyncOutput/#parameter","title":"Parameter","text":"<code>suspendTime</code> int \u00b7  <code>500</code> The time the output waits until it checks for new logs in ms. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/AsyncOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/AsyncOutput/#suspendtime","title":"SuspendTime","text":"<pre><code>public int SuspendTime { get; set; }\n</code></pre> Type: int <p>Gets or sets the time the output waits until it checks for new logs in ms.</p>"},{"location":"Reference/Outputs/AsyncOutput/#events_1","title":"Events","text":""},{"location":"Reference/Outputs/AsyncOutput/#onstart","title":"OnStart","text":"<pre><code>protected event EventHandler OnStart;\n</code></pre> Delegate: EventHandler <p>Event called when the output gets started.</p>"},{"location":"Reference/Outputs/AsyncOutput/#ondispose","title":"OnDispose","text":"<pre><code>protected event EventHandler OnDispose;\n</code></pre> Delegate: EventHandler <p>Event called when the output gets disposed.</p>"},{"location":"Reference/Outputs/AsyncOutput/#methods_1","title":"Methods","text":""},{"location":"Reference/Outputs/AsyncOutput/#start","title":"Start()","text":"<pre><code>public void Start()\n</code></pre> <p>Starts this instance.</p>"},{"location":"Reference/Outputs/AsyncOutput/#writenonblockingstring-log","title":"WriteNonBlocking((string, Log)[])","text":"<pre><code>public abstract void WriteNonBlocking((string, Log)[] logs)\n</code></pre> <p>Writes the specified formatted log.</p>"},{"location":"Reference/Outputs/AsyncOutput/#parameter_1","title":"Parameter","text":"<code>logs</code> (string, Log)[]  \u00b7  The logs."},{"location":"Reference/Outputs/ConsoleOutput/","title":"ConsoleOutput Class","text":""},{"location":"Reference/Outputs/ConsoleOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public class ConsoleOutput : Output\n</code></pre> Object Output ConsoleOutput <p>Output using the default console output.</p>"},{"location":"Reference/Outputs/ConsoleOutput/#constructors","title":"Constructors","text":"Name ConsoleOutput() ConsoleOutput(bool, string, LevelContainer, Dictionary&lt;LogLevel, Color&gt;)"},{"location":"Reference/Outputs/ConsoleOutput/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer ColorEnabled bool Colors Dictionary&lt;LogLevel, Color&gt;"},{"location":"Reference/Outputs/ConsoleOutput/#inherited-methods","title":"Inherited Methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code>"},{"location":"Reference/Outputs/ConsoleOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/ConsoleOutput/#consoleoutput","title":"ConsoleOutput()","text":"<pre><code>public ConsoleOutput()\n: this(true, null, null, null)\n</code></pre> <p>Initializes a new instance of the ConsoleOutput class.</p>"},{"location":"Reference/Outputs/ConsoleOutput/#consoleoutputbool-string-levelcontainer-dictionaryloglevel-color","title":"ConsoleOutput(bool, string, LevelContainer, Dictionary&lt;LogLevel, Color&gt;)","text":"<pre><code>public ConsoleOutput(\nbool colorEnabled = true,\nstring format = null,\nLevelContainer levels = null,\nDictionary&lt;LogLevel, Color&gt; colors = null)\n</code></pre> <p>Initializes a new instance of the ConsoleOutput class.</p>"},{"location":"Reference/Outputs/ConsoleOutput/#parameter","title":"Parameter","text":"<code>colorEnabled</code> bool \u00b7  <code>true</code> If set to <code>true</code> color output is enabled. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings. <code>colors</code> Dictionary&lt;LogLevel, Color&gt; The colors."},{"location":"Reference/Outputs/ConsoleOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/ConsoleOutput/#colorenabled","title":"ColorEnabled","text":"<pre><code>public bool ColorEnabled { get; set; }\n</code></pre> Type: bool <p>Gets or sets a value indicating whether color is enabled.</p>"},{"location":"Reference/Outputs/ConsoleOutput/#colors","title":"Colors","text":"<pre><code>public LevelContainer Levels { get; set; }\n</code></pre> Type: Dictionary&lt;LogLevel, Color&gt; <p>Gets or sets the colors for each log level.</p>"},{"location":"Reference/Outputs/EmailOutput/","title":"EmailOutput Class","text":""},{"location":"Reference/Outputs/EmailOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public class EmailOutput : AsyncOutput\n</code></pre> <p>Object Output AsyncOutput EmailOutput</p> Implements: System.IDisposable <p>Output sending mails.</p>"},{"location":"Reference/Outputs/EmailOutput/#constructors","title":"Constructors","text":"Name EmailOutput() EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer)"},{"location":"Reference/Outputs/EmailOutput/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer SuspendTime int Client SmtpClient From MailAddress To MailAddress[] Bcc MailAddress[] CC MailAddress[] SubjectFormat string"},{"location":"Reference/Outputs/EmailOutput/#inherited-methods","title":"Inherited Methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code> Start() <code>public</code> WriteNonBlocking((string, Log)[]) <code>public</code> Dispose() <code>public</code>"},{"location":"Reference/Outputs/EmailOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/EmailOutput/#emailoutput","title":"EmailOutput()","text":"<pre><code>public EmailOutput()\n: this(null, null)\n</code></pre> <p>Initializes a new instance of the EmailOutput class.</p>"},{"location":"Reference/Outputs/EmailOutput/#emailoutputsmtpclient-mailaddress-mailaddress-mailaddress-mailaddress-int-string-levelcontainer","title":"EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer)","text":"<pre><code>public EmailOutput(\nSmtpClient client,\nMailAddress from,\nMailAddress[] to = null,\nMailAddress[] bcc = null,\nMailAddress[] cc = null,\nstring formatSubject = \"[$La{l}$] $C$\",\nint suspendTime = 5000,\nstring format = null,\nLevelContainer levels = null)\n: base(suspendTime, format, levels)\n</code></pre> <p>Initializes a new instance of the EmailOutput class.</p>"},{"location":"Reference/Outputs/EmailOutput/#parameter","title":"Parameter","text":"<code>client</code> SmtpClient \u00b7  The smtp client. <code>from</code> MailAddress \u00b7  The email from field. <code>to</code> MailAddress[] \u00b7  <code>null</code> The email to field. <code>bcc</code> MailAddress[] \u00b7  <code>null</code> The email bcc field. <code>cc</code> MailAddress[] \u00b7  <code>null</code> The email cc field. <code>formatSubject</code> string \u00b7  <code>\"[$La{l}$] $C$\"</code> The format of the subject field. <code>suspendTime</code> int \u00b7  <code>5000</code> The suspend time between logs in ms. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/EmailOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/EmailOutput/#client","title":"Client","text":"<pre><code>public SmtpClient Client { get; set; }\n</code></pre> Type: SmtpClient <p>Gets or sets the smtp client.</p>"},{"location":"Reference/Outputs/EmailOutput/#from","title":"From","text":"<pre><code>public MailAddress From { get; set; }\n</code></pre> Type: MailAddress <p>Gets or sets the email from field.</p>"},{"location":"Reference/Outputs/EmailOutput/#to","title":"To","text":"<pre><code>public MailAddress[] To { get; set; }\n</code></pre> Type: MailAddress[] <p>Gets or sets the email to field.</p>"},{"location":"Reference/Outputs/EmailOutput/#bcc","title":"Bcc","text":"<pre><code>public MailAddress[] Bcc { get; set; }\n</code></pre> Type: MailAddress[] <p>Gets or sets the email bcc field.</p>"},{"location":"Reference/Outputs/EmailOutput/#cc","title":"CC","text":"<pre><code>public MailAddress[] CC { get; set; }\n</code></pre> Type: MailAddress[] <p>Gets or sets the email cc field.</p>"},{"location":"Reference/Outputs/EmailOutput/#formatsubject","title":"FormatSubject","text":"<pre><code>public string FormatSubject { get; set; }\n</code></pre> Type: string <p>Gets or sets the format of the subject field.</p>"},{"location":"Reference/Outputs/FileOutput/","title":"FileOutput Class","text":""},{"location":"Reference/Outputs/FileOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code> public class FileOutput : AsyncOutput\n</code></pre> Object Output AsyncOutput FileOutput <p>Output writing asynchronously to a file.</p>"},{"location":"Reference/Outputs/FileOutput/#constructors","title":"Constructors","text":"Name FileOutput() FileOutput(string, int, string, LevelContainer)"},{"location":"Reference/Outputs/FileOutput/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer SuspendTime int Path string"},{"location":"Reference/Outputs/FileOutput/#inherited-methods","title":"Inherited Methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code> Start() <code>public</code> WriteNonBlocking((string, Log)[]) <code>public</code>"},{"location":"Reference/Outputs/FileOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/FileOutput/#fileoutput","title":"FileOutput()","text":"<pre><code>public FileOutput()\n: this(\".log\", 500, null, null)\n</code></pre> <p>Initializes a new instance of the FileOutput class.</p>"},{"location":"Reference/Outputs/FileOutput/#fileoutputstring-int-string-levelcontainer","title":"FileOutput(string, int, string, LevelContainer)","text":"<pre><code>public FileOutput(\nstring path = \".log\",\nint suspendTime = 500,\nstring format = null,\nLevelContainer levels = null)\n: base(suspendTime, format, levels)\n</code></pre> <p>Initializes a new instance of the FileOutput class.</p>"},{"location":"Reference/Outputs/FileOutput/#parameter","title":"Parameter","text":"<code>path</code> string \u00b7  <code>\".log\"</code> The path. <code>suspendTime</code> int \u00b7  <code>500</code> The suspend time between logs in ms. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/FileOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/FileOutput/#path","title":"Path","text":"<pre><code>public string Path { get; set; }\n</code></pre> Type: string <p>Gets or sets the path the output should log to.</p>"},{"location":"Reference/Outputs/GenericOutput/","title":"GenericOutput Class","text":""},{"location":"Reference/Outputs/GenericOutput/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public class GenericOutput : Output\n</code></pre> <p>Object Output GenericOutput</p> Implements: IDictionary&lt;string, object&gt; <p>Generic output that can generate an output from the <code>Type</code> parameter. Used to parse the settings file. Gets automatically constructed when provided to an <code>OutputContainer</code>.</p>"},{"location":"Reference/Outputs/GenericOutput/#constructors","title":"Constructors","text":"Name GenericOutput() GenericOutput(string?, Dictionary&lt;string, object&gt;?, string?, LevelContainer?)"},{"location":"Reference/Outputs/GenericOutput/#properties","title":"Properties","text":"Name Type GET SET Format string? Levels LevelContainer? Count int Item[string] object Keys Dictionary&lt;string, object&gt;.KeyCollection Values Dictionary&lt;string, object&gt;.ValueCollection IsReadOnly bool Type string?"},{"location":"Reference/Outputs/GenericOutput/#inherited-methods","title":"Inherited Methods","text":"Name Modifiers Returns Write(string, Log) <code>public</code> Add(KeyValuePair&lt;string, object&gt;) <code>public</code> Add(string, object) <code>public</code> Clear() <code>public</code> Contains(KeyValuePair&lt;string, object&gt;) <code>public</code> bool ContainsKey(string) <code>public</code> bool CopyTo(KeyValuePair&lt;string, object&gt;[], int) <code>public</code> GetEnumerator() <code>public</code> IEnumerator&lt;KeyValuePair&lt;string, object&gt;&gt; Remove(string) <code>public</code> bool TryGetValue(string, out object) <code>public</code> bool"},{"location":"Reference/Outputs/GenericOutput/#methods","title":"Methods","text":"Name Modifiers Returns ConstructOutput() <code>public</code> Output"},{"location":"Reference/Outputs/GenericOutput/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/GenericOutput/#genericoutput","title":"GenericOutput()","text":"<pre><code>public GenericOutput()\n: this(null, null, null, null)\n</code></pre> <p>Initializes a new instance of the GenericOutput class.</p>"},{"location":"Reference/Outputs/GenericOutput/#genericoutputstring-dictionarystring-object-string-levelcontainer","title":"GenericOutput(string?, Dictionary&lt;string, object&gt;?, string?, LevelContainer?)","text":"<pre><code>public GenericOutput(\nstring? type = null,\nDictionary&lt;string, object&gt;? parameter = null,\nstring? format = null,\nLevelContainer? levels = null)\n</code></pre> <p>Initializes a new instance of the GenericOutput class.</p>"},{"location":"Reference/Outputs/GenericOutput/#parameter","title":"Parameter","text":"<code>type</code> string? \u00b7  <code>null</code> The type. <code>parameter</code> Dictionary&lt;string, object&gt;? \u00b7  <code>null</code> The parameter dictionary. <code>format</code> string? \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer? \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/GenericOutput/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/GenericOutput/#type","title":"Type","text":"<pre><code>public string? Type { get; set; }\n</code></pre> Type: string? <p>The type name of the output (found in namespace <code>SharpLog.Outputs</code>).</p>"},{"location":"Reference/Outputs/GenericOutput/#methods_1","title":"Methods","text":""},{"location":"Reference/Outputs/GenericOutput/#constructoutput","title":"ConstructOutput()","text":"<pre><code>public Output ConstructOutput()\n</code></pre> <p>Constructs an output from the given type and parameter.</p>"},{"location":"Reference/Outputs/GenericOutput/#returns","title":"Returns","text":"Type: Output <p>The constructed output.</p>"},{"location":"Reference/Outputs/GenericOutput/#throws","title":"Throws","text":"NullReferenceException Thrown when GenericOutput.Type is <code>null</code>.  ArgumentException Thrown when GenericOutput.Type class cannot be found."},{"location":"Reference/Outputs/Output/","title":"Output Class","text":""},{"location":"Reference/Outputs/Output/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Outputs</code></p> <pre><code>public abstract class Output\n</code></pre> Object Output <p>Base class for all outputs.</p>"},{"location":"Reference/Outputs/Output/#constructors","title":"Constructors","text":"Name Output(string, LevelContainer)"},{"location":"Reference/Outputs/Output/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer"},{"location":"Reference/Outputs/Output/#methods","title":"Methods","text":"Name Modifiers Returns Write(string, Log) <code>public abstract</code>"},{"location":"Reference/Outputs/Output/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Outputs/Output/#outputstring-levelcontainer","title":"Output(string, LevelContainer)","text":"<pre><code>public Output(\nstring format = null, LevelContainer levels = null)\n</code></pre> <p>Initializes a new instance of the Output class.</p>"},{"location":"Reference/Outputs/Output/#parameter","title":"Parameter","text":"<code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The level settings."},{"location":"Reference/Outputs/Output/#properties_1","title":"Properties","text":""},{"location":"Reference/Outputs/Output/#format","title":"Format","text":"<pre><code>public string Format { get; set; }\n</code></pre> Type: string <p>Gets or sets the format for the output.</p>"},{"location":"Reference/Outputs/Output/#levels","title":"Levels","text":"<pre><code>public LevelContainer Levels { get; set; }\n</code></pre> Type: LevelContainer <p>Gets or sets the level settings for the output.</p>"},{"location":"Reference/Outputs/Output/#methods_1","title":"Methods","text":""},{"location":"Reference/Outputs/Output/#writestring-log","title":"Write(string, Log)","text":"<pre><code>public abstract void Write(string formattedLog, Log log)\n</code></pre> <p>Writes the specified formatted log.</p>"},{"location":"Reference/Outputs/Output/#parameter_1","title":"Parameter","text":"<code>formattedLog</code> string  \u00b7  The formatted log. <code>log</code> Log  \u00b7  The log information."},{"location":"Reference/Settings/","title":"Settings","text":"<p>The Settings namespace contains classes and enums containing all settings for SharpLog.</p>"},{"location":"Reference/Settings/BaseSettings/","title":"BaseSettings Class","text":""},{"location":"Reference/Settings/BaseSettings/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class BaseSettings : IDisposable\n</code></pre> <p>Object BaseSettings</p> Implements: System.IDisposable <p>Base class containing all settings.</p>"},{"location":"Reference/Settings/BaseSettings/#constructors","title":"Constructors","text":"Name BaseSettings(string, LevelContainer, OutputContainer, Dictionary&lt;string, Tag&gt;)"},{"location":"Reference/Settings/BaseSettings/#properties","title":"Properties","text":"Name Type GET SET Format string Levels LevelContainer Outputs OutputContainer Tags Dictionary&lt;string, Tag&gt;"},{"location":"Reference/Settings/BaseSettings/#inherited-methods","title":"Inherited methods","text":"Name Modifiers Returns Dispose() <code>public</code>"},{"location":"Reference/Settings/BaseSettings/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/BaseSettings/#basesettingsstring-levelcontainer-outputcontainer-dictionarystring-tag","title":"BaseSettings(string, LevelContainer, OutputContainer, Dictionary&lt;string, Tag&gt;)","text":"<pre><code>public BaseSettings(\nstring fomat = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\",\nLevelContainer levels = null,\nOutputContainer outputs = null,\nDictionary&lt;string, Tag&gt; tags = null)\n</code></pre> <p>Initializes a new instance of the BaseSettings class using default settings if not provided.</p>"},{"location":"Reference/Settings/BaseSettings/#parameter","title":"Parameter","text":"<code>format</code> string \u00b7  <code>\"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\"</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The levels. <code>outputs</code> OutputContainer \u00b7  <code>null</code> The outputs. <code>tags</code> Dictionary&lt;string, Tag&gt; \u00b7  <code>null</code> The tags."},{"location":"Reference/Settings/BaseSettings/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/BaseSettings/#format","title":"Format","text":"<pre><code>public string Format { get; set; }\n</code></pre> Type: string <p>Gets or sets the general format.</p>"},{"location":"Reference/Settings/BaseSettings/#levels","title":"Levels","text":"<pre><code>public LevelContainer Levels { get; set; }\n</code></pre> Type: LevelContainer <p>Gets or sets the general levels.</p>"},{"location":"Reference/Settings/BaseSettings/#outputs","title":"Outputs","text":"<pre><code>public OutputContainer Outputs { get; set; }\n</code></pre> Type: OutputContainer <p>Gets or sets the general outputs.</p>"},{"location":"Reference/Settings/BaseSettings/#tags","title":"Tags","text":"<pre><code>public Dictionary&lt;string, Tag&gt; Tags { get; set; }\n</code></pre> Type: Dictionary&lt;string, Tag&gt; <p>Gets or sets the tags.</p>"},{"location":"Reference/Settings/Level/","title":"Level Class","text":""},{"location":"Reference/Settings/Level/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class Level\n</code></pre> Object Level <p>Class containing the settings for a log level.</p>"},{"location":"Reference/Settings/Level/#constructors","title":"Constructors","text":"Name Level() Level(char, bool, string)]"},{"location":"Reference/Settings/Level/#properties","title":"Properties","text":"Name Type GET SET Enabled bool Format string Short char"},{"location":"Reference/Settings/Level/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/Level/#level","title":"Level()","text":"<pre><code>public Level()\n: this('-', true, null)\n</code></pre> <p>Initializes a new instance of the level class using default values.</p>"},{"location":"Reference/Settings/Level/#levelchar-bool-string","title":"Level(char, bool, string)","text":"<pre><code>public Level(\nchar @short = '-',\nbool enabled = true,\nstring format = null)\n</code></pre> <p>Initializes a new instance of the Level class.</p>"},{"location":"Reference/Settings/Level/#parameter","title":"Parameter","text":"<code>@short</code> char \u00b7  <code>-</code> The short for the log level. <code>enabled</code> bool \u00b7  <code>true</code> Wether the level is enabled. <code>format</code> string \u00b7  <code>null</code> The format."},{"location":"Reference/Settings/Level/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/Level/#enabled","title":"Enabled","text":"<pre><code>public bool Enabled { get; set; }\n</code></pre> Type: bool <p>Gets or sets a value indicating whether this level is enabled.</p>"},{"location":"Reference/Settings/Level/#format","title":"Format","text":"<pre><code>public string Format { get; set; }\n</code></pre> Type: string <p>Gets or sets the optional format.</p>"},{"location":"Reference/Settings/Level/#short","title":"Short","text":"<pre><code>public char Short { get; set; }\n</code></pre> Type: char <p>Gets or sets a char representing the log level.</p>"},{"location":"Reference/Settings/LevelContainer/","title":"LevelContainer Class","text":""},{"location":"Reference/Settings/LevelContainer/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class LevelContainer\n</code></pre> Object LevelContainer <p>Container for all log level specific settings.</p>"},{"location":"Reference/Settings/LevelContainer/#constructors","title":"Constructors","text":"Name LevelContainer() LevelContainer(Level, Level, Level, Level, Level, Level)]"},{"location":"Reference/Settings/LevelContainer/#properties","title":"Properties","text":"Name Type GET SET Debug Level Trace Level Info Level Warning Level Error Level Fatal Level"},{"location":"Reference/Settings/LevelContainer/#methods","title":"Methods","text":"Name Modifiers Returns GetLevel(LogLevel level) <code>public</code> Level"},{"location":"Reference/Settings/LevelContainer/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/LevelContainer/#levelcontainer","title":"LevelContainer()","text":"<pre><code>public LevelContainer()\n: this(null, null, null, null, null, null)\n</code></pre> <p>Initializes a new instance of the LevelContainer class.</p>"},{"location":"Reference/Settings/LevelContainer/#levelcontainerlevel-level-level-level-level-level","title":"LevelContainer(Level, Level, Level, Level, Level, Level)","text":"<pre><code>public LevelContainer(\nLevel debug = null,\nLevel trace = null,\nLevel info = null,\nLevel warning = null,\nLevel error = null,\nLevel fatal = null)\n</code></pre> <p>Initializes a new instance of the LevelContainer class.</p>"},{"location":"Reference/Settings/LevelContainer/#parameter","title":"Parameter","text":"<code>debug</code> Level \u00b7  <code>null</code> The debug settings. <code>trace</code> Level \u00b7  <code>null</code> The trace settings. <code>info</code> Level \u00b7  <code>null</code> The info settings. <code>warning</code> Level \u00b7  <code>null</code> The warning settings. <code>error</code> Level \u00b7  <code>null</code> The error settings. <code>fatal</code> Level \u00b7  <code>null</code> The fatal settings."},{"location":"Reference/Settings/LevelContainer/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/LevelContainer/#debug","title":"Debug","text":"<pre><code>public Level Debug { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>debug</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#trace","title":"Trace","text":"<pre><code>public Level Trace { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>trace</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#info","title":"Info","text":"<pre><code>public Level Info { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>info</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#warning","title":"Warning","text":"<pre><code>public Level Warning { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>warning</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#error","title":"Error","text":"<pre><code>public Level Error { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>error</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#fatal","title":"Fatal","text":"<pre><code>public Level Fatal { get; set; }\n</code></pre> Type: Level <p>Gets or sets the settings for the log level <code>fatal</code>.</p>"},{"location":"Reference/Settings/LevelContainer/#methods_1","title":"Methods","text":""},{"location":"Reference/Settings/LevelContainer/#getlevelloglevel","title":"GetLevel(LogLevel)","text":"<pre><code>public Level GetLevel(LogLevel level)\n</code></pre> <p>Gets the settings for a level.</p>"},{"location":"Reference/Settings/LevelContainer/#parameter_1","title":"Parameter","text":"<code>level</code> LogLevel  \u00b7  The level the settings should be returned from."},{"location":"Reference/Settings/LevelContainer/#returns","title":"Returns","text":"Type: Level The requested settings."},{"location":"Reference/Settings/OutputContainer/","title":"OutputContainer Class","text":""},{"location":"Reference/Settings/OutputContainer/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class OutputContainer : IDisposable\n</code></pre> <p>Object OutputContainer</p> Implements: System.IDisposable, IList <p>Container for output settings.</p>"},{"location":"Reference/Settings/OutputContainer/#constructors","title":"Constructors","text":"Name OutputContainer()"},{"location":"Reference/Settings/OutputContainer/#properties","title":"Properties","text":"Name Type GET SET Count int IsReadOnly bool Itemint Output"},{"location":"Reference/Settings/OutputContainer/#inherited-methods","title":"Inherited methods","text":"Name Modifiers Returns Dispose() <code>public</code> Add(Output) <code>public</code> Clear() <code>public</code> Contains(Output) <code>public</code> bool CopyTo(Output[], int) <code>public</code> GetEnumerator() <code>public</code> IEnumerator&lt;Output&gt; IndexOf(Output) <code>public</code> int Insert(int, Output) <code>public</code> Remove(Output) <code>public</code> bool RemoveAt(int) <code>public</code>"},{"location":"Reference/Settings/OutputContainer/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/OutputContainer/#outputcontainer","title":"OutputContainer()","text":"<pre><code>public OutputContainer()\n</code></pre> <p>Initializes a new instance of the OutputContainer class using default settings if not provided.</p>"},{"location":"Reference/Settings/Tag/","title":"Tag Class","text":""},{"location":"Reference/Settings/Tag/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class Tag : IDisposable\n</code></pre> <p>Object Tag</p> Implements: System.IDisposable <p>Class containing settings of a tag.</p>"},{"location":"Reference/Settings/Tag/#constructors","title":"Constructors","text":"Name Tag() Tag(bool, string, LevelContainer, OutputContainer)"},{"location":"Reference/Settings/Tag/#properties","title":"Properties","text":"Name Type GET SET Enabled bool Format string Levels LevelContainer Outputs OutputContainer"},{"location":"Reference/Settings/Tag/#inherited-methods","title":"Inherited methods","text":"Name Modifiers Returns Dispose() <code>public</code>"},{"location":"Reference/Settings/Tag/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/Tag/#tag","title":"Tag()","text":"<pre><code>public Tag()\n: this(true, null, null, null)\n</code></pre> <p>Initializes a new instance of the Tag class using default settings if not provided.</p>"},{"location":"Reference/Settings/Tag/#tagbool-string-levelcontainer-outputcontainer","title":"Tag(bool, string, LevelContainer, OutputContainer)","text":"<pre><code>public Tag(\nbool enabled = true,\nstring format = null,\nLevelContainer levels = null,\nOutputContainer outputs = null)\n</code></pre> <p>Initializes a new instance of the Tag class using default settings if not provided.</p>"},{"location":"Reference/Settings/Tag/#parameter","title":"Parameter","text":"<code>enabled</code> bool \u00b7  <code>true</code> Wether the tag is enabled. <code>format</code> string \u00b7  <code>null</code> The format. <code>levels</code> LevelContainer \u00b7  <code>null</code> The levels. <code>outputs</code> OutputContainer \u00b7  <code>null</code> The outputs."},{"location":"Reference/Settings/Tag/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/Tag/#enabled","title":"Enabled","text":"<pre><code>public bool Enabled { get; set; }\n</code></pre> Type: bool <p>Gets or sets a value indicating whether this tag is enabled.</p>"},{"location":"Reference/Settings/Tag/#format","title":"Format","text":"<pre><code>public string Format { get; set; }\n</code></pre> Type: string <p>Gets or sets the format.</p>"},{"location":"Reference/Settings/Tag/#levels","title":"Levels","text":"<pre><code>public LevelContainer Levels { get; set; }\n</code></pre> Type: LevelContainer <p>Gets or sets the level settings.</p>"},{"location":"Reference/Settings/Tag/#outputs","title":"Outputs","text":"<pre><code>public OutputContainer Outputs { get; set; }\n</code></pre> Type: OutputContainer <p>Gets or sets the outputs.</p>"},{"location":"Reference/Settings/Wrapper/Color/","title":"Color Class","text":""},{"location":"Reference/Settings/Wrapper/Color/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings</code></p> <pre><code>public class Color\n</code></pre> Object Color <p>Class containing colors for the ConsoleOutput.</p>"},{"location":"Reference/Settings/Wrapper/Color/#constructors","title":"Constructors","text":"Name Color() Color(ConsoleColor, ConsoleColor)]"},{"location":"Reference/Settings/Wrapper/Color/#properties","title":"Properties","text":"Name Type GET SET Background ConsoleColor Foreground ConsoleColor"},{"location":"Reference/Settings/Wrapper/Color/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/Wrapper/Color/#color","title":"Color()","text":"<pre><code>public Color()\n: this(ConsoleColor.White, ConsoleColor.Black)\n</code></pre> <p>Initializes a new instance of the Color class.</p>"},{"location":"Reference/Settings/Wrapper/Color/#colorconsolecolor-consolecolor","title":"Color(ConsoleColor, ConsoleColor)","text":"<pre><code>public Color(\nConsoleColor foreground = ConsoleColor.White, ConsoleColor background = ConsoleColor.Black)\n</code></pre> <p>Initializes a new instance of the Color class.</p>"},{"location":"Reference/Settings/Wrapper/Color/#parameter","title":"Parameter","text":"<code>foreground</code> ConsoleColor \u00b7  <code>ConsoleColor.White</code> The foreground color. <code>background</code> ConsoleColor \u00b7  <code>ConsoleColor.Black</code> The background color."},{"location":"Reference/Settings/Wrapper/Color/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/Wrapper/Color/#background","title":"Background","text":"<pre><code>public ConsoleColor Background { get; set; }\n</code></pre> Type: ConsoleColor <p>Gets or sets the background color.</p>"},{"location":"Reference/Settings/Wrapper/Color/#foreground","title":"Foreground","text":"<pre><code>public ConsoleColor Foreground { get; set; }\n</code></pre> Type: ConsoleColor <p>Gets or sets the foreground color.</p>"},{"location":"Reference/Settings/Wrapper/MailAddress/","title":"MailAddress Class","text":""},{"location":"Reference/Settings/Wrapper/MailAddress/#definition","title":"Definition","text":"<p><code>namespace Sharplog.Settings.Wrapper</code></p> <pre><code>public abstract class MailAddress\n</code></pre> Object MailAddress <p>Class containing a mail address.</p>"},{"location":"Reference/Settings/Wrapper/MailAddress/#constructors","title":"Constructors","text":"Name MailAddress() MailAddress(string, string)"},{"location":"Reference/Settings/Wrapper/MailAddress/#properties","title":"Properties","text":"Name Type GET SET Address string DisplayName string"},{"location":"Reference/Settings/Wrapper/MailAddress/#constructors_1","title":"Constructors","text":""},{"location":"Reference/Settings/Wrapper/MailAddress/#mailaddress","title":"MailAddress()","text":"<pre><code>public MailAddress()\n: this(null, null)\n</code></pre> <p>Initializes a new instance of the MailAddress class.</p>"},{"location":"Reference/Settings/Wrapper/MailAddress/#mailaddressstring-string","title":"MailAddress(string, string)","text":"<pre><code>public MailAddress(string address, string displayName = null)\n</code></pre> <p>Initializes a new instance of the MailAddress class.</p>"},{"location":"Reference/Settings/Wrapper/MailAddress/#parameter","title":"Parameter","text":"<code>address</code> string \u00b7  The format. <code>displayName</code> string \u00b7  <code>null</code> The format."},{"location":"Reference/Settings/Wrapper/MailAddress/#properties_1","title":"Properties","text":""},{"location":"Reference/Settings/Wrapper/MailAddress/#address","title":"Address","text":"<pre><code>public string Address { get; set; }\n</code></pre> Type:  string <p>Gets or sets the mail address.</p>"},{"location":"Reference/Settings/Wrapper/MailAddress/#displayname","title":"DisplayName","text":"<pre><code>public string DisplayName { get; set; }\n</code></pre> Type:  string <p>Gets or sets the display name.</p>"}]}