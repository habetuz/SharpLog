{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference . Example \u00b6 Example log from GameSense . [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs 16x Left 3x Space 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions 1x /game_metadata 1x /bind_game_event 8x /register_game_event 4692x /multiple_game_events 29x /game_heartbeat","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference .","title":"Welcome to SharpLog"},{"location":"#example","text":"Example log from GameSense . [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs 16x Left 3x Space 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions 1x /game_metadata 1x /bind_game_event 8x /register_game_event 4692x /multiple_game_events 29x /game_heartbeat","title":"Example"},{"location":"Getting%20started/","text":"Getting started \u00b6 Installation \u00b6 Install the package from nuget . Usage \u00b6 Logger \u00b6 Create a new logger. Logger MyLogger = new Logger () { Ident = \"Test\" , LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; Default settings Ident = \"NoName\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true Log to the console. MyLogger . Log ( \"Test\" , LoggerType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional When the level argument is left blank the logger automatically logs on level LoggerType . Debug MassLogger \u00b6 This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings Ident = \"NoName\" , InfoLogText = \"\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true You can log debug , warning and error just like the normal logger . MyLogger . Log ( \"Test\" , LoggerType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional Again, when the level argument is left blank the logger automatically logs on level LoggerType . Debug Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . MyLogger . Log ( Keyboard . pressedKey (), LoggerType . Info ); Output Every 30000 milliseconds: [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: 63x Left 16x Return 39x LShiftKey 12x RShiftKey 39x Back 28x Space 36x LControlKey Note Note that we set InfoLogText as Keyboard inputs: in the constructor. Counter The counters of the logs get reset after every log. When you want to log a info log instantly set the instant argument as true . MyLogger . Log ( \"Instant info\" , LoggerType . Info , true ); Output [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info","title":"Getting started"},{"location":"Getting%20started/#getting-started","text":"","title":"Getting started"},{"location":"Getting%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Getting%20started/#usage","text":"","title":"Usage"},{"location":"Getting%20started/#logger","text":"Create a new logger. Logger MyLogger = new Logger () { Ident = \"Test\" , LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; Default settings Ident = \"NoName\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true Log to the console. MyLogger . Log ( \"Test\" , LoggerType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional When the level argument is left blank the logger automatically logs on level LoggerType . Debug","title":"Logger"},{"location":"Getting%20started/#masslogger","text":"This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogDebug = true , LogInfo = true , LogWarning = true , LogError = true }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings Ident = \"NoName\" , InfoLogText = \"\" , LogDebug = false , LogInfo = true , LogWarning = true , LogError = true You can log debug , warning and error just like the normal logger . MyLogger . Log ( \"Test\" , LoggerType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional Again, when the level argument is left blank the logger automatically logs on level LoggerType . Debug Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . MyLogger . Log ( Keyboard . pressedKey (), LoggerType . Info ); Output Every 30000 milliseconds: [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: 63x Left 16x Return 39x LShiftKey 12x RShiftKey 39x Back 28x Space 36x LControlKey Note Note that we set InfoLogText as Keyboard inputs: in the constructor. Counter The counters of the logs get reset after every log. When you want to log a info log instantly set the instant argument as true . MyLogger . Log ( \"Instant info\" , LoggerType . Info , true ); Output [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info","title":"MassLogger"},{"location":"Reference/Logger/","text":"Logger \u00b6 Source namespace SharpLog public class Logger Class for easy but clear logging. Summary \u00b6 Constructors \u00b6 Constructor Logger () Properties \u00b6 public \u00b6 Type Property Get Set string Ident bool LogDebug bool LogInfo bool LogWarning bool LogError Methods \u00b6 public \u00b6 Type Method void Log (string text, LoggerType type = LoggerType .Debug) Constructors \u00b6 Logger \u00b6 Source public Logger () Default constructor for the logger. Properties \u00b6 Ident \u00b6 Source public string Ident { set ;} Sets the identification-tag for the logger. \"NoName\" on default. LogDebug \u00b6 Source public bool LogDebug { set ;} Sets a value indication whether Debug should be logged. false on default. LogInfo \u00b6 Source public bool LogInfo { set ;} Sets a value indication whether Info should be logged. true on default. LogWarning \u00b6 Source public bool LogWarning { set ;} Sets a value indication whether Warning should be logged. true on default. LogError \u00b6 Source public bool LogError { set ;} Sets a value indication whether Error should be logged. true on default. Methods \u00b6 Log \u00b6 Source public void Log ( string text , LoggerType type = LoggerType .Debug) Logs to the console with time, origin and type information. Parameters \u00b6 Type Name Description Default string text The text to be logged - LoggerType type The type of the log LoggerType .Debug","title":"Logger"},{"location":"Reference/Logger/#logger","text":"Source namespace SharpLog public class Logger Class for easy but clear logging.","title":"Logger"},{"location":"Reference/Logger/#summary","text":"","title":"Summary"},{"location":"Reference/Logger/#constructors","text":"Constructor Logger ()","title":"Constructors"},{"location":"Reference/Logger/#properties","text":"","title":"Properties"},{"location":"Reference/Logger/#public","text":"Type Property Get Set string Ident bool LogDebug bool LogInfo bool LogWarning bool LogError","title":"public"},{"location":"Reference/Logger/#methods","text":"","title":"Methods"},{"location":"Reference/Logger/#public_1","text":"Type Method void Log (string text, LoggerType type = LoggerType .Debug)","title":"public"},{"location":"Reference/Logger/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Logger/#logger_1","text":"Source public Logger () Default constructor for the logger.","title":"Logger"},{"location":"Reference/Logger/#properties_1","text":"","title":"Properties"},{"location":"Reference/Logger/#ident","text":"Source public string Ident { set ;} Sets the identification-tag for the logger. \"NoName\" on default.","title":"Ident"},{"location":"Reference/Logger/#logdebug","text":"Source public bool LogDebug { set ;} Sets a value indication whether Debug should be logged. false on default.","title":"LogDebug"},{"location":"Reference/Logger/#loginfo","text":"Source public bool LogInfo { set ;} Sets a value indication whether Info should be logged. true on default.","title":"LogInfo"},{"location":"Reference/Logger/#logwarning","text":"Source public bool LogWarning { set ;} Sets a value indication whether Warning should be logged. true on default.","title":"LogWarning"},{"location":"Reference/Logger/#logerror","text":"Source public bool LogError { set ;} Sets a value indication whether Error should be logged. true on default.","title":"LogError"},{"location":"Reference/Logger/#methods_1","text":"","title":"Methods"},{"location":"Reference/Logger/#log","text":"Source public void Log ( string text , LoggerType type = LoggerType .Debug) Logs to the console with time, origin and type information.","title":"Log"},{"location":"Reference/Logger/#parameters","text":"Type Name Description Default string text The text to be logged - LoggerType type The type of the log LoggerType .Debug","title":"Parameters"},{"location":"Reference/LoggerType/","text":"LoggerType \u00b6 Source namespace SharpLog public enum LoggerType All available logging levels. Fields \u00b6 Name Value Debug 0 Info 1 Warning 2 Error 3","title":"LoggerType"},{"location":"Reference/LoggerType/#loggertype","text":"Source namespace SharpLog public enum LoggerType All available logging levels.","title":"LoggerType"},{"location":"Reference/LoggerType/#fields","text":"Name Value Debug 0 Info 1 Warning 2 Error 3","title":"Fields"},{"location":"Reference/MassLogger/","text":"MassLogger \u00b6 Source namespace SharpLog public class MassLogger extends Logger A logger to log a massive amount of similar info logs. It collects info logs and prints them out compressed at a set interval. Summary \u00b6 Constructors \u00b6 Constructor MassLogger (int logPause) Properties \u00b6 Type Property Get Set string InfoLogText Inherited properties \u00b6 Type Property Get Set string Ident bool LogDebug bool LogInfo bool LogWarning bool LogError Methods \u00b6 Type Method void Log (string text, LoggerType type, bool instant) void Log (string text, LoggerType type = LoggerType .Debug) Constructors \u00b6 MassLogger \u00b6 Source public MassLogger ( int logPause ) Initializes a new instance of the class. Parameters \u00b6 Type Name Description Default int logPause The interval time of the logger 30000 Properties \u00b6 InfoLogText \u00b6 Source public string InfoLogText { set ;} Gets or sets the text that is displayed before the info log. Methods \u00b6 Log \u00b6 Source public void Log ( string text , LoggerType type, bool instant) Logs to the console with time, origin and type information. Parameters \u00b6 Type Name Description Default string text The text to be logged - LoggerType type The type of the log LoggerType .Debug bool instant If true, every log, and especially LoggerType .Info , gets logged instantly false","title":"MassLogger"},{"location":"Reference/MassLogger/#masslogger","text":"Source namespace SharpLog public class MassLogger extends Logger A logger to log a massive amount of similar info logs. It collects info logs and prints them out compressed at a set interval.","title":"MassLogger"},{"location":"Reference/MassLogger/#summary","text":"","title":"Summary"},{"location":"Reference/MassLogger/#constructors","text":"Constructor MassLogger (int logPause)","title":"Constructors"},{"location":"Reference/MassLogger/#properties","text":"Type Property Get Set string InfoLogText","title":"Properties"},{"location":"Reference/MassLogger/#inherited-properties","text":"Type Property Get Set string Ident bool LogDebug bool LogInfo bool LogWarning bool LogError","title":"Inherited properties"},{"location":"Reference/MassLogger/#methods","text":"Type Method void Log (string text, LoggerType type, bool instant) void Log (string text, LoggerType type = LoggerType .Debug)","title":"Methods"},{"location":"Reference/MassLogger/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/MassLogger/#masslogger_1","text":"Source public MassLogger ( int logPause ) Initializes a new instance of the class.","title":"MassLogger"},{"location":"Reference/MassLogger/#parameters","text":"Type Name Description Default int logPause The interval time of the logger 30000","title":"Parameters"},{"location":"Reference/MassLogger/#properties_1","text":"","title":"Properties"},{"location":"Reference/MassLogger/#infologtext","text":"Source public string InfoLogText { set ;} Gets or sets the text that is displayed before the info log.","title":"InfoLogText"},{"location":"Reference/MassLogger/#methods_1","text":"","title":"Methods"},{"location":"Reference/MassLogger/#log","text":"Source public void Log ( string text , LoggerType type, bool instant) Logs to the console with time, origin and type information.","title":"Log"},{"location":"Reference/MassLogger/#parameters_1","text":"Type Name Description Default string text The text to be logged - LoggerType type The type of the log LoggerType .Debug bool instant If true, every log, and especially LoggerType .Info , gets logged instantly false","title":"Parameters"}]}