{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.3.* Features \u00b6 Fast and easy to use No setup required Easy to customize Outputs \u00b6 Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file! Send your logs via email! Example \u00b6 SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.3.*","title":"Welcome to SharpLog"},{"location":"#features","text":"Fast and easy to use No setup required Easy to customize","title":"Features"},{"location":"#outputs","text":"Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file! Send your logs via email!","title":"Outputs"},{"location":"#example","text":"SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Example"},{"location":"Get%20started/","text":"Installation \u00b6 Install the package from nuget . Usage \u00b6 Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" ); Logging . LogTrace ( \"Trace!\" ); Logging . LogInfo ( \"Info!\" ); Logging . LogWarning ( \"Warning!\" ); Logging . LogError ( \"Error!\" ); Logging . LogFatal ( \"Fatal!\" ); 18.10.2022 20:31:12: [Debug][SharpLogAndGameSenseTest.Program->Main(...)] Debug! 18.10.2022 20:31:12: [Trace][SharpLogAndGameSenseTest.Program->Main(...)] Trace! 18.10.2022 20:31:12: [Info][SharpLogAndGameSenseTest.Program->Main(...)] Info! 18.10.2022 20:31:12: [Warn][SharpLogAndGameSenseTest.Program->Main(...)] Warning! 18.10.2022 20:31:12: [Error][SharpLogAndGameSenseTest.Program->Main(...)] Error! 18.10.2022 20:31:12: [Fatal][SharpLogAndGameSenseTest.Program->Main(...)] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) bool : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. Wether you want to log the stack trace for better a better understanding what happened with your program. Exit your program correctly \u00b6 Warning If you do not exit your program correctly async outputs may not be finished writing or sending your logs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Dispose the logger to ensure that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" ); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Get started"},{"location":"Get%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Get%20started/#usage","text":"Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" ); Logging . LogTrace ( \"Trace!\" ); Logging . LogInfo ( \"Info!\" ); Logging . LogWarning ( \"Warning!\" ); Logging . LogError ( \"Error!\" ); Logging . LogFatal ( \"Fatal!\" ); 18.10.2022 20:31:12: [Debug][SharpLogAndGameSenseTest.Program->Main(...)] Debug! 18.10.2022 20:31:12: [Trace][SharpLogAndGameSenseTest.Program->Main(...)] Trace! 18.10.2022 20:31:12: [Info][SharpLogAndGameSenseTest.Program->Main(...)] Info! 18.10.2022 20:31:12: [Warn][SharpLogAndGameSenseTest.Program->Main(...)] Warning! 18.10.2022 20:31:12: [Error][SharpLogAndGameSenseTest.Program->Main(...)] Error! 18.10.2022 20:31:12: [Fatal][SharpLogAndGameSenseTest.Program->Main(...)] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) bool : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. Wether you want to log the stack trace for better a better understanding what happened with your program.","title":"Usage"},{"location":"Get%20started/#exit-your-program-correctly","text":"Warning If you do not exit your program correctly async outputs may not be finished writing or sending your logs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Dispose the logger to ensure that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" ); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Exit your program correctly"},{"location":"Customize/","text":"Either customize your logger by editing the sharplog.yml file or by modifying the SettingsManager.Settings property. One important customization option is the format of your log messages. Read here for more information about formatting. Set global format \u00b6 The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Tp{[}s{]}$[$C$->$F$] $M$$Ep{\\n}i{ }$$Sp{\\n}$$' SettingsManager . Settings . Format = \"$D$: [$L$]$Tp{[}s{]}$[$C$->$F$] $M$$Ep{\\n}i{ }$$Sp{\\n}$\" Set the global level settings \u00b6 The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' )); Set global outputs \u00b6 The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer () Set a console output \u00b6 sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput () Set a file output \u00b6 sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput () Set a email output \u00b6 sharplog.yml C# email : levels : null format : null format_subject : '[$La{l}$] $C$' client : host : smtp.yourdomain.com port : 587 enable_ssl : true credentials : user_name : yourusername password : yourpassword from : display_name : SharpLog address : sharplog@yourdomain.com to : - display_name : Your Receiver address : mail@your-receiver.com bcc : - display_name : Your Receiver address : mail@your-receiver.com cc : - display_name : Your Receiver address : mail@your-receiver.com new EmailOutput () { Client = new SmtpClient () { Port = 587 , Host = \"smtp.yourdomain.com\" , EnableSsl = true , Credentials = new NetworkCredential () { Password = \"yourusername\" , UserName = \"yourpassword\" , }, }, From = new MailAddress () { Address = \"sharplog@yourdomain.com\" , DisplayName = \"SharpLog\" , }, To = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, Bcc = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, Cc = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, }; Set a custom output \u00b6 Create a class that extends the Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ()) Set tag specific settings \u00b6 The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Customize"},{"location":"Customize/#set-global-format","text":"The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Tp{[}s{]}$[$C$->$F$] $M$$Ep{\\n}i{ }$$Sp{\\n}$$' SettingsManager . Settings . Format = \"$D$: [$L$]$Tp{[}s{]}$[$C$->$F$] $M$$Ep{\\n}i{ }$$Sp{\\n}$\"","title":"Set global format"},{"location":"Customize/#set-the-global-level-settings","text":"The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' ));","title":"Set the global level settings"},{"location":"Customize/#set-global-outputs","text":"The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer ()","title":"Set global outputs"},{"location":"Customize/#set-a-console-output","text":"sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput ()","title":"Set a console output"},{"location":"Customize/#set-a-file-output","text":"sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput ()","title":"Set a file output"},{"location":"Customize/#set-a-email-output","text":"sharplog.yml C# email : levels : null format : null format_subject : '[$La{l}$] $C$' client : host : smtp.yourdomain.com port : 587 enable_ssl : true credentials : user_name : yourusername password : yourpassword from : display_name : SharpLog address : sharplog@yourdomain.com to : - display_name : Your Receiver address : mail@your-receiver.com bcc : - display_name : Your Receiver address : mail@your-receiver.com cc : - display_name : Your Receiver address : mail@your-receiver.com new EmailOutput () { Client = new SmtpClient () { Port = 587 , Host = \"smtp.yourdomain.com\" , EnableSsl = true , Credentials = new NetworkCredential () { Password = \"yourusername\" , UserName = \"yourpassword\" , }, }, From = new MailAddress () { Address = \"sharplog@yourdomain.com\" , DisplayName = \"SharpLog\" , }, To = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, Bcc = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, Cc = new MailAddress [] { new MailAddress () { Address = \"mail@your-receiver.com\" , DisplayName = \"Your Receiver\" , }, }, };","title":"Set a email output"},{"location":"Customize/#set-a-custom-output","text":"Create a class that extends the Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ())","title":"Set a custom output"},{"location":"Customize/#set-tag-specific-settings","text":"The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Set tag specific settings"},{"location":"Customize/Default%20settings/","text":"sharplog.yml format : '$D$: [$L$][$C$->$F$] $M$$Ep{\\n}i{ }$$Sp{\\n}$' levels : debug : short : '?' enabled : true format : null trace : short : '&' enabled : true format : null info : short : '+' enabled : true format : null warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null outputs : console : levels : null format : null color_enabled : true colors : debug : background : black foreground : darkGray trace : background : black foreground : white info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black file : levels : null format : null path : .log suspend_time : 500","title":"Default settings"},{"location":"Customize/Formatting/","text":"Specify the formatting of you logs using a string with placeholders that get replaced with information. A placeholder is build up the following: //(1) (4) (3) $ Da { yyyy '-' MM '-' dd 'T' HH ':' mm ':' ss } p { SomePrefix } s { SomeSuffix } $ // (2) (5) The capitalized letter specifies the type of the placeholder. The argument property. Each placeholder starts and ends with $ The prefix property. The suffix property. Tip To write $ to your log write $$ in your format string. Add up to three properties to each placeholder for more customization: Note Prefix and suffix properties cannot contain nested placeholders. Property Description p{...} Prefix that will be displayed before of the information. s{...} Suffix that will be displayed after the information. a{...} Arguments that some placeholders need to specify their formatting. i{...} Indentation that will be displayed before every line. List of placeholders \u00b6 Placeholder Description Arguments C The namespace and class of the source. F The source function. l for the whole function definition. s or empty for a short version. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"Formatting"},{"location":"Customize/Formatting/#list-of-placeholders","text":"Placeholder Description Arguments C The namespace and class of the source. F The source function. l for the whole function definition. s or empty for a short version. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"List of placeholders"},{"location":"Reference/","text":"Reference \u00b6 Reference for every public function, property and field of SharpLog ! Reference up to date! The reference is complete right now with version 3.3.* ! No missing references.","title":"Reference"},{"location":"Reference/#reference","text":"Reference for every public function, property and field of SharpLog ! Reference up to date! The reference is complete right now with version 3.3.* ! No missing references.","title":"Reference"},{"location":"Reference/Log/","text":"Log Struct \u00b6 Definition \u00b6 namespace Sharplog public struct Log Object ValueType \u2003\u2002 Log Struct containing all information for a log. Constructors \u00b6 Name Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string) Properties \u00b6 Name Type GET SET Level LogLevel Class Type Function MethodBase Message object Tag string Exception Exception LevelSettings Level Format string Time DateTime StackTrace string Constructors \u00b6 Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string) \u00b6 public Log ( LogLevel level , object message , Type @class , MethodBase function , string tag , Exception exception , Level levelSettings , string format , DateTime time , string stackTrace ) Initializes a new instance of the Log struct. Parameter \u00b6 level LogLevel \u00b7 The level. message object \u00b7 The message. @class Type \u00b7 The class. function MethodBase \u00b7 The function. tag string \u00b7 The tag. exception Exception \u00b7 The exception. levelSettings Level \u00b7 The level settings. format string \u00b7 The format. time DateTime \u00b7 The time. stackTrace string \u00b7 The stackTrace. Properties \u00b6 Level \u00b6 public LogLevel Level { get ; set ; } Type: LogLevel Gets or sets the level of the log. Class \u00b6 public Type Class { get ; set ; } Type: Type Gets or sets the sender type. Function \u00b6 public MethodBase Function { get ; set ; } Type: MethodBase Gets or sets the sender function. Message \u00b6 public object Message { get ; set ; } Type: object Gets or sets the message. Tag \u00b6 public string Tag { get ; set ; } Type: string Gets or sets the tag. Exception \u00b6 public Exception Exception { get ; set ; } Type: Exception Gets or sets the exception. Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the format of the log. LevelSettings \u00b6 public Level LevelSettings { get ; set ; } Type: Level Gets or sets the level settings. Time \u00b6 public DateTime Time { get ; set ; } Type: DateTime Gets or sets the level settings. StackTrace \u00b6 public string StackTrace { get ; set ; } Type: DateTime Gets or sets the stack trace.","title":"Log Struct"},{"location":"Reference/Log/#log-struct","text":"","title":"Log Struct"},{"location":"Reference/Log/#definition","text":"namespace Sharplog public struct Log Object ValueType \u2003\u2002 Log Struct containing all information for a log.","title":"Definition"},{"location":"Reference/Log/#constructors","text":"Name Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string)","title":"Constructors"},{"location":"Reference/Log/#properties","text":"Name Type GET SET Level LogLevel Class Type Function MethodBase Message object Tag string Exception Exception LevelSettings Level Format string Time DateTime StackTrace string","title":"Properties"},{"location":"Reference/Log/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Log/#logloglevel-object-type-methodbase-string-exception-level-string-datetime-string","text":"public Log ( LogLevel level , object message , Type @class , MethodBase function , string tag , Exception exception , Level levelSettings , string format , DateTime time , string stackTrace ) Initializes a new instance of the Log struct.","title":"Log(LogLevel, object, Type, MethodBase, string, Exception, Level, string, DateTime, string)"},{"location":"Reference/Log/#properties_1","text":"","title":"Properties"},{"location":"Reference/Log/#level","text":"public LogLevel Level { get ; set ; } Type: LogLevel Gets or sets the level of the log.","title":"Level"},{"location":"Reference/Log/#class","text":"public Type Class { get ; set ; } Type: Type Gets or sets the sender type.","title":"Class"},{"location":"Reference/Log/#function","text":"public MethodBase Function { get ; set ; } Type: MethodBase Gets or sets the sender function.","title":"Function"},{"location":"Reference/Log/#message","text":"public object Message { get ; set ; } Type: object Gets or sets the message.","title":"Message"},{"location":"Reference/Log/#tag","text":"public string Tag { get ; set ; } Type: string Gets or sets the tag.","title":"Tag"},{"location":"Reference/Log/#exception","text":"public Exception Exception { get ; set ; } Type: Exception Gets or sets the exception.","title":"Exception"},{"location":"Reference/Log/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the format of the log.","title":"Format"},{"location":"Reference/Log/#levelsettings","text":"public Level LevelSettings { get ; set ; } Type: Level Gets or sets the level settings.","title":"LevelSettings"},{"location":"Reference/Log/#time","text":"public DateTime Time { get ; set ; } Type: DateTime Gets or sets the level settings.","title":"Time"},{"location":"Reference/Log/#stacktrace","text":"public string StackTrace { get ; set ; } Type: DateTime Gets or sets the stack trace.","title":"StackTrace"},{"location":"Reference/LogLevel/","text":"LogLevel Enum \u00b6 Definition \u00b6 namespace Sharplog public enum LogLevel Object ValueType \u2003\u2002 Enum \u2003\u2002\u2003\u2002 LogLevel Specifies the log level. Fields \u00b6 Name Value Description Debug 0 Level debug Trace 1 Level trace Info 2 Level info Warn 3 Level warning Error 4 Level error Fatal 5 Level fatal","title":"LogLevel Enum"},{"location":"Reference/LogLevel/#loglevel-enum","text":"","title":"LogLevel Enum"},{"location":"Reference/LogLevel/#definition","text":"namespace Sharplog public enum LogLevel Object ValueType \u2003\u2002 Enum \u2003\u2002\u2003\u2002 LogLevel Specifies the log level.","title":"Definition"},{"location":"Reference/LogLevel/#fields","text":"Name Value Description Debug 0 Level debug Trace 1 Level trace Info 2 Level info Warn 3 Level warning Error 4 Level error Fatal 5 Level fatal","title":"Fields"},{"location":"Reference/Logging/","text":"Logging Class \u00b6 Definition \u00b6 namespace Sharplog public static class Logging Object Logging Class responsible for logging. Methods \u00b6 Name Modifiers Returns Initialize() public static Dispose() public static LogDebug(object, string, Exception, bool) public static LogTrace(object, string, Exception, bool) public static LogInfo(object, string, Exception, bool) public static LogWarning(object, string, Exception, bool) public static LogError(object, string, Exception, bool) public static LogFatal(object, string, Exception, bool) public static Methods \u00b6 Initialize() \u00b6 public static void Initialize () Initializes the logger. The logger will automatically initialize itself with the first log function call. Use this function if you want to initialize before you start logging. Dispose() \u00b6 public static void Dispose () Releases resources and logs all remaining logs. Should be called before exiting the program. LogDebug(object, string, Exception, bool) \u00b6 public static void LogDebug ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a debug log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace. LogTrace(object, string, Exception, bool) \u00b6 public static void LogTrace ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a trace log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace. LogInfo(object, string, Exception, bool) \u00b6 public static void LogInfo ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs an information log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace. LogWarning(object, string, Exception, bool) \u00b6 public static void LogWarning ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a warning log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace. LogError(object, string, Exception, bool) \u00b6 public static void LogError ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs an error log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace. LogFatal(object, string, Exception, bool) \u00b6 public static void LogFatal ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a fatal log message and exits the program with code 1. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace bool \u00b7 false Wether the log should include the stack trace.","title":"Logging Class"},{"location":"Reference/Logging/#logging-class","text":"","title":"Logging Class"},{"location":"Reference/Logging/#definition","text":"namespace Sharplog public static class Logging Object Logging Class responsible for logging.","title":"Definition"},{"location":"Reference/Logging/#methods","text":"Name Modifiers Returns Initialize() public static Dispose() public static LogDebug(object, string, Exception, bool) public static LogTrace(object, string, Exception, bool) public static LogInfo(object, string, Exception, bool) public static LogWarning(object, string, Exception, bool) public static LogError(object, string, Exception, bool) public static LogFatal(object, string, Exception, bool) public static","title":"Methods"},{"location":"Reference/Logging/#methods_1","text":"","title":"Methods"},{"location":"Reference/Logging/#initialize","text":"public static void Initialize () Initializes the logger. The logger will automatically initialize itself with the first log function call. Use this function if you want to initialize before you start logging.","title":"Initialize()"},{"location":"Reference/Logging/#dispose","text":"public static void Dispose () Releases resources and logs all remaining logs. Should be called before exiting the program.","title":"Dispose()"},{"location":"Reference/Logging/#logdebugobject-string-exception-bool","text":"public static void LogDebug ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a debug log message.","title":"LogDebug(object, string, Exception, bool)"},{"location":"Reference/Logging/#logtraceobject-string-exception-bool","text":"public static void LogTrace ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a trace log message.","title":"LogTrace(object, string, Exception, bool)"},{"location":"Reference/Logging/#loginfoobject-string-exception-bool","text":"public static void LogInfo ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs an information log message.","title":"LogInfo(object, string, Exception, bool)"},{"location":"Reference/Logging/#logwarningobject-string-exception-bool","text":"public static void LogWarning ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a warning log message.","title":"LogWarning(object, string, Exception, bool)"},{"location":"Reference/Logging/#logerrorobject-string-exception-bool","text":"public static void LogError ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs an error log message.","title":"LogError(object, string, Exception, bool)"},{"location":"Reference/Logging/#logfatalobject-string-exception-bool","text":"public static void LogFatal ( object message , string tag = null , Exception exception = null , bool stackTrace = false ) Logs a fatal log message and exits the program with code 1.","title":"LogFatal(object, string, Exception, bool)"},{"location":"Reference/SettingsManager/","text":"SettingsManager Class \u00b6 Definition \u00b6 namespace Sharplog public static class SettingsManager Object SettingsManager Class responsible for managing the settings. Properties \u00b6 Name Type GET SET Settings BaseSettings Methods \u00b6 Name Modifiers Returns ReloadSettings(bool) public static Properties \u00b6 Settings \u00b6 public static BaseSettings Settings { get ; set ; } Type: BaseSettings Gets or sets the settings. Methods \u00b6 ReloadSettings(bool) \u00b6 public static void ReloadSettings ( bool fromFile = true ) Reloads the settings. Parameter \u00b6 fromFile bool \u00b7 true The message of the log. Gets converted to a string using .toString() .","title":"SettingsManager Class"},{"location":"Reference/SettingsManager/#settingsmanager-class","text":"","title":"SettingsManager Class"},{"location":"Reference/SettingsManager/#definition","text":"namespace Sharplog public static class SettingsManager Object SettingsManager Class responsible for managing the settings.","title":"Definition"},{"location":"Reference/SettingsManager/#properties","text":"Name Type GET SET Settings BaseSettings","title":"Properties"},{"location":"Reference/SettingsManager/#methods","text":"Name Modifiers Returns ReloadSettings(bool) public static","title":"Methods"},{"location":"Reference/SettingsManager/#properties_1","text":"","title":"Properties"},{"location":"Reference/SettingsManager/#settings","text":"public static BaseSettings Settings { get ; set ; } Type: BaseSettings Gets or sets the settings.","title":"Settings"},{"location":"Reference/SettingsManager/#methods_1","text":"","title":"Methods"},{"location":"Reference/SettingsManager/#reloadsettingsbool","text":"public static void ReloadSettings ( bool fromFile = true ) Reloads the settings.","title":"ReloadSettings(bool)"},{"location":"Reference/Outputs/","text":"Outputs \u00b6 The Outputs namespace contains classes and enums containing various outputs for SharpLog.","title":"Outputs"},{"location":"Reference/Outputs/#outputs","text":"The Outputs namespace contains classes and enums containing various outputs for SharpLog.","title":"Outputs"},{"location":"Reference/Outputs/AsyncOutput/","text":"AsyncOutput Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public abstract class AsyncOutput Object Output \u2003\u2002 AsyncOutput Implements : System.IDisposable Base class for async outputs. Constructors \u00b6 Name AsyncOutput(int, string, LevelContainer) Properties \u00b6 Name Type GET SET SuspendTime int Format string Levels LevelContainer Events \u00b6 Name Delegate Modifiers OnStart EventHandler protected OnDispose EventHandler protected Methods \u00b6 Name Modifiers Returns Start() public WriteNonBlocking((string, Log)[]) public abstract Inherited methods \u00b6 Name Modifiers Returns Write(string, Log) public Dispose() public Constructors \u00b6 AsyncOutput(int, string, LevelContainer) \u00b6 public AsyncOutput ( int suspendTime = 500 , string format = null , LevelContainer levels = null ) : base ( format , levels ) Initializes a new instance of the AsyncOutput class. Parameter \u00b6 suspendTime int \u00b7 500 The time the output waits until it checks for new logs in ms. format string \u00b7 null The format. levels LevelContainer \u00b7 null The level settings. Properties \u00b6 SuspendTime \u00b6 public int SuspendTime { get ; set ; } Type: int Gets or sets the time the output waits until it checks for new logs in ms. Events \u00b6 OnStart \u00b6 protected event EventHandler OnStart ; Delegate: EventHandler Event called when the output gets started. OnDispose \u00b6 protected event EventHandler OnDispose ; Delegate: EventHandler Event called when the output gets disposed. Methods \u00b6 Start() \u00b6 public void Start () Starts this instance. WriteNonBlocking((string, Log)[]) \u00b6 public abstract void WriteNonBlocking (( string , Log )[] logs ) Writes the specified formatted log. Parameter \u00b6 logs (string, Log)[] \u00b7 The logs.","title":"AsyncOutput Class"},{"location":"Reference/Outputs/AsyncOutput/#asyncoutput-class","text":"","title":"AsyncOutput Class"},{"location":"Reference/Outputs/AsyncOutput/#definition","text":"namespace Sharplog.Outputs public abstract class AsyncOutput Object Output \u2003\u2002 AsyncOutput Implements : System.IDisposable Base class for async outputs.","title":"Definition"},{"location":"Reference/Outputs/AsyncOutput/#constructors","text":"Name AsyncOutput(int, string, LevelContainer)","title":"Constructors"},{"location":"Reference/Outputs/AsyncOutput/#properties","text":"Name Type GET SET SuspendTime int Format string Levels LevelContainer","title":"Properties"},{"location":"Reference/Outputs/AsyncOutput/#events","text":"Name Delegate Modifiers OnStart EventHandler protected OnDispose EventHandler protected","title":"Events"},{"location":"Reference/Outputs/AsyncOutput/#methods","text":"Name Modifiers Returns Start() public WriteNonBlocking((string, Log)[]) public abstract","title":"Methods"},{"location":"Reference/Outputs/AsyncOutput/#inherited-methods","text":"Name Modifiers Returns Write(string, Log) public Dispose() public","title":"Inherited methods"},{"location":"Reference/Outputs/AsyncOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/AsyncOutput/#asyncoutputint-string-levelcontainer","text":"public AsyncOutput ( int suspendTime = 500 , string format = null , LevelContainer levels = null ) : base ( format , levels ) Initializes a new instance of the AsyncOutput class.","title":"AsyncOutput(int, string, LevelContainer)"},{"location":"Reference/Outputs/AsyncOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/AsyncOutput/#suspendtime","text":"public int SuspendTime { get ; set ; } Type: int Gets or sets the time the output waits until it checks for new logs in ms.","title":"SuspendTime"},{"location":"Reference/Outputs/AsyncOutput/#events_1","text":"","title":"Events"},{"location":"Reference/Outputs/AsyncOutput/#onstart","text":"protected event EventHandler OnStart ; Delegate: EventHandler Event called when the output gets started.","title":"OnStart"},{"location":"Reference/Outputs/AsyncOutput/#ondispose","text":"protected event EventHandler OnDispose ; Delegate: EventHandler Event called when the output gets disposed.","title":"OnDispose"},{"location":"Reference/Outputs/AsyncOutput/#methods_1","text":"","title":"Methods"},{"location":"Reference/Outputs/AsyncOutput/#start","text":"public void Start () Starts this instance.","title":"Start()"},{"location":"Reference/Outputs/AsyncOutput/#writenonblockingstring-log","text":"public abstract void WriteNonBlocking (( string , Log )[] logs ) Writes the specified formatted log.","title":"WriteNonBlocking((string, Log)[])"},{"location":"Reference/Outputs/ConsoleOutput/","text":"ConsoleOutput Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public abstract class ConsoleOutput : Output Object Output \u2003\u2002 ConsoleOutput Output using the default console output. Constructors \u00b6 Name ConsoleOutput() ConsoleOutput(bool, string, LevelContainer, Dictionary< LogLevel, Color >) Properties \u00b6 Name Type GET SET Format string Levels LevelContainer ColorEnabled bool Colors Dictionary< LogLevel, Color > Inherited Methods \u00b6 Name Modifiers Returns Write(string, Log) public Constructors \u00b6 ConsoleOutput() \u00b6 public ConsoleOutput () : this ( true , null , null , null ) Initializes a new instance of the ConsoleOutput class. ConsoleOutput(bool, string, LevelContainer, Dictionary< LogLevel, Color >) \u00b6 public ConsoleOutput ( bool colorEnabled = true , string format = null , LevelContainer levels = null , Dictionary < LogLevel , Color > colors = null ) Initializes a new instance of the ConsoleOutput class. Parameter \u00b6 colorEnabled bool \u00b7 true If set to true color output is enabled. format string \u00b7 null The format. levels LevelContainer \u00b7 null The level settings. colors Dictionary< LogLevel, Color > The colors. Properties \u00b6 ColorEnabled \u00b6 public bool ColorEnabled { get ; set ; } Type: string Gets or sets a value indicating whether color is enabled. Colors \u00b6 public LevelContainer Levels { get ; set ; } Type: Dictionary< LogLevel, Color > Gets or sets the colors for each log level.","title":"ConsoleOutput Class"},{"location":"Reference/Outputs/ConsoleOutput/#consoleoutput-class","text":"","title":"ConsoleOutput Class"},{"location":"Reference/Outputs/ConsoleOutput/#definition","text":"namespace Sharplog.Outputs public abstract class ConsoleOutput : Output Object Output \u2003\u2002 ConsoleOutput Output using the default console output.","title":"Definition"},{"location":"Reference/Outputs/ConsoleOutput/#constructors","text":"Name ConsoleOutput() ConsoleOutput(bool, string, LevelContainer, Dictionary< LogLevel, Color >)","title":"Constructors"},{"location":"Reference/Outputs/ConsoleOutput/#properties","text":"Name Type GET SET Format string Levels LevelContainer ColorEnabled bool Colors Dictionary< LogLevel, Color >","title":"Properties"},{"location":"Reference/Outputs/ConsoleOutput/#inherited-methods","text":"Name Modifiers Returns Write(string, Log) public","title":"Inherited Methods"},{"location":"Reference/Outputs/ConsoleOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/ConsoleOutput/#consoleoutput","text":"public ConsoleOutput () : this ( true , null , null , null ) Initializes a new instance of the ConsoleOutput class.","title":"ConsoleOutput()"},{"location":"Reference/Outputs/ConsoleOutput/#consoleoutputbool-string-levelcontainer-dictionary-loglevel-color","text":"public ConsoleOutput ( bool colorEnabled = true , string format = null , LevelContainer levels = null , Dictionary < LogLevel , Color > colors = null ) Initializes a new instance of the ConsoleOutput class.","title":"ConsoleOutput(bool, string, LevelContainer, Dictionary&lt; LogLevel, Color &gt;)"},{"location":"Reference/Outputs/ConsoleOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/ConsoleOutput/#colorenabled","text":"public bool ColorEnabled { get ; set ; } Type: string Gets or sets a value indicating whether color is enabled.","title":"ColorEnabled"},{"location":"Reference/Outputs/ConsoleOutput/#colors","text":"public LevelContainer Levels { get ; set ; } Type: Dictionary< LogLevel, Color > Gets or sets the colors for each log level.","title":"Colors"},{"location":"Reference/Outputs/EmailOutput/","text":"EmailOutput Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public class EmailOutput : AsyncOutput Object Output \u2003\u2002 AsyncOutput \u2003\u2002\u2003\u2002 EmailOutput Implements : System.IDisposable Output sending mails. Constructors \u00b6 Name EmailOutput() EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer) Properties \u00b6 Name Type GET SET Format string Levels LevelContainer SuspendTime int Client SmtpClient From MailAddress To MailAddress[] Bcc MailAddress[] CC MailAddress[] SubjectFormat string Inherited Methods \u00b6 Name Modifiers Returns Write(string, Log) public Start() public WriteNonBlocking((string, Log)[]) public Dispose() public Constructors \u00b6 EmailOutput() \u00b6 public EmailOutput () : this ( null , null ) Initializes a new instance of the EmailOutput class. EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer) \u00b6 public EmailOutput ( SmtpClient client , MailAddress from , MailAddress [] to = null , MailAddress [] bcc = null , MailAddress [] cc = null , string formatSubject = \"[$La{l}$] $C$\" , int suspendTime = 5000 , string format = null , LevelContainer levels = null ) : base ( suspendTime , format , levels ) Initializes a new instance of the EmailOutput class. Parameter \u00b6 client SmtpClient \u00b7 The smtp client. from MailAddress \u00b7 The email from field. to MailAddress[] \u00b7 null The email to field. bcc MailAddress[] \u00b7 null The email bcc field. cc MailAddress[] \u00b7 null The email cc field. formatSubject string \u00b7 \"[$La{l}$] $C$\" The format of the subject field. suspendTime int \u00b7 500 The suspend time between logs in ms. format string \u00b7 null The format. levels LevelContainer \u00b7 null The level settings. Properties \u00b6 Client \u00b6 public SmtpClient Client { get ; set ; } Type: SmtpClient Gets or sets the smtp client. From \u00b6 public MailAddress From { get ; set ; } Type: MailAddress Gets or sets the email from field. To \u00b6 public MailAddress [] To { get ; set ; } Type: MailAddress[] Gets or sets the email to field. Bcc \u00b6 public MailAddress [] Bcc { get ; set ; } Type: MailAddress[] Gets or sets the email bcc field. CC \u00b6 public MailAddress [] CC { get ; set ; } Type: MailAddress[] Gets or sets the email cc field. FormatSubject \u00b6 public string FormatSubject { get ; set ; } Type: string Gets or sets the format of the subject field.","title":"EmailOutput Class"},{"location":"Reference/Outputs/EmailOutput/#emailoutput-class","text":"","title":"EmailOutput Class"},{"location":"Reference/Outputs/EmailOutput/#definition","text":"namespace Sharplog.Outputs public class EmailOutput : AsyncOutput Object Output \u2003\u2002 AsyncOutput \u2003\u2002\u2003\u2002 EmailOutput Implements : System.IDisposable Output sending mails.","title":"Definition"},{"location":"Reference/Outputs/EmailOutput/#constructors","text":"Name EmailOutput() EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer)","title":"Constructors"},{"location":"Reference/Outputs/EmailOutput/#properties","text":"Name Type GET SET Format string Levels LevelContainer SuspendTime int Client SmtpClient From MailAddress To MailAddress[] Bcc MailAddress[] CC MailAddress[] SubjectFormat string","title":"Properties"},{"location":"Reference/Outputs/EmailOutput/#inherited-methods","text":"Name Modifiers Returns Write(string, Log) public Start() public WriteNonBlocking((string, Log)[]) public Dispose() public","title":"Inherited Methods"},{"location":"Reference/Outputs/EmailOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/EmailOutput/#emailoutput","text":"public EmailOutput () : this ( null , null ) Initializes a new instance of the EmailOutput class.","title":"EmailOutput()"},{"location":"Reference/Outputs/EmailOutput/#emailoutputsmtpclient-mailaddress-mailaddress-mailaddress-mailaddress-int-string-levelcontainer","text":"public EmailOutput ( SmtpClient client , MailAddress from , MailAddress [] to = null , MailAddress [] bcc = null , MailAddress [] cc = null , string formatSubject = \"[$La{l}$] $C$\" , int suspendTime = 5000 , string format = null , LevelContainer levels = null ) : base ( suspendTime , format , levels ) Initializes a new instance of the EmailOutput class.","title":"EmailOutput(SmtpClient, MailAddress, MailAddress[], MailAddress[], MailAddress[], int, string, LevelContainer)"},{"location":"Reference/Outputs/EmailOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/EmailOutput/#client","text":"public SmtpClient Client { get ; set ; } Type: SmtpClient Gets or sets the smtp client.","title":"Client"},{"location":"Reference/Outputs/EmailOutput/#from","text":"public MailAddress From { get ; set ; } Type: MailAddress Gets or sets the email from field.","title":"From"},{"location":"Reference/Outputs/EmailOutput/#to","text":"public MailAddress [] To { get ; set ; } Type: MailAddress[] Gets or sets the email to field.","title":"To"},{"location":"Reference/Outputs/EmailOutput/#bcc","text":"public MailAddress [] Bcc { get ; set ; } Type: MailAddress[] Gets or sets the email bcc field.","title":"Bcc"},{"location":"Reference/Outputs/EmailOutput/#cc","text":"public MailAddress [] CC { get ; set ; } Type: MailAddress[] Gets or sets the email cc field.","title":"CC"},{"location":"Reference/Outputs/EmailOutput/#formatsubject","text":"public string FormatSubject { get ; set ; } Type: string Gets or sets the format of the subject field.","title":"FormatSubject"},{"location":"Reference/Outputs/FileOutput/","text":"FileOutput Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public class FileOutput : AsyncOutput Object Output \u2003\u2002 AsyncOutput \u2003\u2002\u2003\u2002 FileOutput Output writing asynchronously to a file. Constructors \u00b6 Name FileOutput() FileOutput(string, int, string, LevelContainer) Properties \u00b6 Name Type GET SET Format string Levels LevelContainer SuspendTime int Path string Inherited Methods \u00b6 Name Modifiers Returns Write(string, Log) public Start() public WriteNonBlocking((string, Log)[]) public Constructors \u00b6 FileOutput() \u00b6 public FileOutput () : this ( \".log\" , 500 , null , null ) Initializes a new instance of the FileOutput class. FileOutput(string, int, string, LevelContainer) \u00b6 public FileOutput ( string path = \".log\" , int suspendTime = 500 , string format = null , LevelContainer levels = null ) : base ( suspendTime , format , levels ) Initializes a new instance of the FileOutput class. Parameter \u00b6 path string \u00b7 \".log\" The path. suspendTime int \u00b7 500 The suspend time between logs in ms. format string \u00b7 null The format. levels LevelContainer \u00b7 null The level settings. Properties \u00b6 Path \u00b6 public string Path { get ; set ; } Type: string Gets or sets the path the output should log to.","title":"FileOutput Class"},{"location":"Reference/Outputs/FileOutput/#fileoutput-class","text":"","title":"FileOutput Class"},{"location":"Reference/Outputs/FileOutput/#definition","text":"namespace Sharplog.Outputs public class FileOutput : AsyncOutput Object Output \u2003\u2002 AsyncOutput \u2003\u2002\u2003\u2002 FileOutput Output writing asynchronously to a file.","title":"Definition"},{"location":"Reference/Outputs/FileOutput/#constructors","text":"Name FileOutput() FileOutput(string, int, string, LevelContainer)","title":"Constructors"},{"location":"Reference/Outputs/FileOutput/#properties","text":"Name Type GET SET Format string Levels LevelContainer SuspendTime int Path string","title":"Properties"},{"location":"Reference/Outputs/FileOutput/#inherited-methods","text":"Name Modifiers Returns Write(string, Log) public Start() public WriteNonBlocking((string, Log)[]) public","title":"Inherited Methods"},{"location":"Reference/Outputs/FileOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/FileOutput/#fileoutput","text":"public FileOutput () : this ( \".log\" , 500 , null , null ) Initializes a new instance of the FileOutput class.","title":"FileOutput()"},{"location":"Reference/Outputs/FileOutput/#fileoutputstring-int-string-levelcontainer","text":"public FileOutput ( string path = \".log\" , int suspendTime = 500 , string format = null , LevelContainer levels = null ) : base ( suspendTime , format , levels ) Initializes a new instance of the FileOutput class.","title":"FileOutput(string, int, string, LevelContainer)"},{"location":"Reference/Outputs/FileOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/FileOutput/#path","text":"public string Path { get ; set ; } Type: string Gets or sets the path the output should log to.","title":"Path"},{"location":"Reference/Outputs/MailAddress/","text":"MailAddress Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public abstract class MailAddress Object MailAddress Class containing a mail address. Constructors \u00b6 Name MailAddress() MailAddress(string, string) Properties \u00b6 Name Type GET SET Address string DisplayName string Constructors \u00b6 MailAddress() \u00b6 public MailAddress () : this ( null , null ) Initializes a new instance of the MailAddress class. MailAddress(string, string) \u00b6 public MailAddress ( string address , string displayName = null ) Initializes a new instance of the MailAddress class. Parameter \u00b6 address string \u00b7 The format. displayName string \u00b7 null The format. Properties \u00b6 Address \u00b6 public string Address { get ; set ; } Type: string Gets or sets the mail address. DisplayName \u00b6 public string DisplayName { get ; set ; } Type: string Gets or sets the display name.","title":"MailAddress Class"},{"location":"Reference/Outputs/MailAddress/#mailaddress-class","text":"","title":"MailAddress Class"},{"location":"Reference/Outputs/MailAddress/#definition","text":"namespace Sharplog.Outputs public abstract class MailAddress Object MailAddress Class containing a mail address.","title":"Definition"},{"location":"Reference/Outputs/MailAddress/#constructors","text":"Name MailAddress() MailAddress(string, string)","title":"Constructors"},{"location":"Reference/Outputs/MailAddress/#properties","text":"Name Type GET SET Address string DisplayName string","title":"Properties"},{"location":"Reference/Outputs/MailAddress/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/MailAddress/#mailaddress","text":"public MailAddress () : this ( null , null ) Initializes a new instance of the MailAddress class.","title":"MailAddress()"},{"location":"Reference/Outputs/MailAddress/#mailaddressstring-string","text":"public MailAddress ( string address , string displayName = null ) Initializes a new instance of the MailAddress class.","title":"MailAddress(string, string)"},{"location":"Reference/Outputs/MailAddress/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/MailAddress/#address","text":"public string Address { get ; set ; } Type: string Gets or sets the mail address.","title":"Address"},{"location":"Reference/Outputs/MailAddress/#displayname","text":"public string DisplayName { get ; set ; } Type: string Gets or sets the display name.","title":"DisplayName"},{"location":"Reference/Outputs/Output/","text":"Output Class \u00b6 Definition \u00b6 namespace Sharplog.Outputs public abstract class Output Object Output Base class for all outputs. Constructors \u00b6 Name Output(string, LevelContainer) Properties \u00b6 Name Type GET SET Format string Levels LevelContainer Methods \u00b6 Name Modifiers Returns Write(string, Log) public abstract Constructors \u00b6 Output(string, LevelContainer) \u00b6 public Output ( string format = null , LevelContainer levels = null ) Initializes a new instance of the Output class. Parameter \u00b6 format string \u00b7 null The format. levels LevelContainer \u00b7 null The level settings. Properties \u00b6 Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the format for the output. Levels \u00b6 public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the level settings for the output. Methods \u00b6 Write(string, Log) \u00b6 public abstract void Write ( string formattedLog , Log log ) Writes the specified formatted log. Parameter \u00b6 formattedLog string \u00b7 The formatted log. log Log \u00b7 The log information.","title":"Output Class"},{"location":"Reference/Outputs/Output/#output-class","text":"","title":"Output Class"},{"location":"Reference/Outputs/Output/#definition","text":"namespace Sharplog.Outputs public abstract class Output Object Output Base class for all outputs.","title":"Definition"},{"location":"Reference/Outputs/Output/#constructors","text":"Name Output(string, LevelContainer)","title":"Constructors"},{"location":"Reference/Outputs/Output/#properties","text":"Name Type GET SET Format string Levels LevelContainer","title":"Properties"},{"location":"Reference/Outputs/Output/#methods","text":"Name Modifiers Returns Write(string, Log) public abstract","title":"Methods"},{"location":"Reference/Outputs/Output/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Outputs/Output/#outputstring-levelcontainer","text":"public Output ( string format = null , LevelContainer levels = null ) Initializes a new instance of the Output class.","title":"Output(string, LevelContainer)"},{"location":"Reference/Outputs/Output/#properties_1","text":"","title":"Properties"},{"location":"Reference/Outputs/Output/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the format for the output.","title":"Format"},{"location":"Reference/Outputs/Output/#levels","text":"public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the level settings for the output.","title":"Levels"},{"location":"Reference/Outputs/Output/#methods_1","text":"","title":"Methods"},{"location":"Reference/Outputs/Output/#writestring-log","text":"public abstract void Write ( string formattedLog , Log log ) Writes the specified formatted log.","title":"Write(string, Log)"},{"location":"Reference/Settings/","text":"Settings \u00b6 The Settings namespace contains classes and enums containing all settings for SharpLog.","title":"Settings"},{"location":"Reference/Settings/#settings","text":"The Settings namespace contains classes and enums containing all settings for SharpLog.","title":"Settings"},{"location":"Reference/Settings/BaseSettings/","text":"BaseSettings Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class BaseSettings : IDisposable Object BaseSettings Implements : System.IDisposable Base class containing all settings. Constructors \u00b6 Name BaseSettings(string, LevelContainer, OutputContainer, Dictionary< string, Tag >) Properties \u00b6 Name Type GET SET Format string Levels LevelContainer Outputs OutputContainer Tags Dictionary< string, Tag > Inherited methods \u00b6 Name Modifiers Returns Dispose() public Constructors \u00b6 BaseSettings(string, LevelContainer, OutputContainer, Dictionary< string, Tag >) \u00b6 public BaseSettings ( string fomat = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\" , LevelContainer levels = null , OutputContainer outputs = null , Dictionary < string , Tag > tags = null ) Initializes a new instance of the BaseSettings class using default settings if not provided. Parameter \u00b6 format string \u00b7 \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\" The format. levels LevelContainer \u00b7 null The levels. outputs OutputContainer \u00b7 null The outputs. tags Dictionary< string, Tag > \u00b7 null The tags. Properties \u00b6 Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the general format. Levels \u00b6 public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the general levels. Outputs \u00b6 public OutputContainer Outputs { get ; set ; } Type: OutputContainer Gets or sets the general outputs. Tags \u00b6 public Dictionary < string , Tag > Tags { get ; set ; } Type: Dictionary< string, Tag > Gets or sets the tags.","title":"BaseSettings Class"},{"location":"Reference/Settings/BaseSettings/#basesettings-class","text":"","title":"BaseSettings Class"},{"location":"Reference/Settings/BaseSettings/#definition","text":"namespace Sharplog.Settings public class BaseSettings : IDisposable Object BaseSettings Implements : System.IDisposable Base class containing all settings.","title":"Definition"},{"location":"Reference/Settings/BaseSettings/#constructors","text":"Name BaseSettings(string, LevelContainer, OutputContainer, Dictionary< string, Tag >)","title":"Constructors"},{"location":"Reference/Settings/BaseSettings/#properties","text":"Name Type GET SET Format string Levels LevelContainer Outputs OutputContainer Tags Dictionary< string, Tag >","title":"Properties"},{"location":"Reference/Settings/BaseSettings/#inherited-methods","text":"Name Modifiers Returns Dispose() public","title":"Inherited methods"},{"location":"Reference/Settings/BaseSettings/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/BaseSettings/#basesettingsstring-levelcontainer-outputcontainer-dictionary-string-tag","text":"public BaseSettings ( string fomat = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\nException: }$$Sp{\\nStackTrace: }$\" , LevelContainer levels = null , OutputContainer outputs = null , Dictionary < string , Tag > tags = null ) Initializes a new instance of the BaseSettings class using default settings if not provided.","title":"BaseSettings(string, LevelContainer, OutputContainer, Dictionary&lt; string, Tag &gt;)"},{"location":"Reference/Settings/BaseSettings/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/BaseSettings/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the general format.","title":"Format"},{"location":"Reference/Settings/BaseSettings/#levels","text":"public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the general levels.","title":"Levels"},{"location":"Reference/Settings/BaseSettings/#outputs","text":"public OutputContainer Outputs { get ; set ; } Type: OutputContainer Gets or sets the general outputs.","title":"Outputs"},{"location":"Reference/Settings/BaseSettings/#tags","text":"public Dictionary < string , Tag > Tags { get ; set ; } Type: Dictionary< string, Tag > Gets or sets the tags.","title":"Tags"},{"location":"Reference/Settings/Color/","text":"Color Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class Color Object Color Class containing colors for the ConsoleOutput . Constructors \u00b6 Name Color() Color(ConsoleColor, ConsoleColor) ] Properties \u00b6 Name Type GET SET Background ConsoleColor Foreground ConsoleColor Constructors \u00b6 Color() \u00b6 public Color () : this ( ConsoleColor . White , ConsoleColor . Black ) Initializes a new instance of the Color class. Color(ConsoleColor, ConsoleColor) \u00b6 public Color ( ConsoleColor foreground = ConsoleColor . White , ConsoleColor background = ConsoleColor . Black ) Initializes a new instance of the Color class. Parameter \u00b6 foreground ConsoleColor \u00b7 ConsoleColor.White The foreground color. background ConsoleColor \u00b7 ConsoleColor.Black The background color. Properties \u00b6 Background \u00b6 public ConsoleColor Background { get ; set ; } Type: ConsoleColor Gets or sets the background color. Foreground \u00b6 public ConsoleColor Foreground { get ; set ; } Type: ConsoleColor Gets or sets the foreground color.","title":"Color Class"},{"location":"Reference/Settings/Color/#color-class","text":"","title":"Color Class"},{"location":"Reference/Settings/Color/#definition","text":"namespace Sharplog.Settings public class Color Object Color Class containing colors for the ConsoleOutput .","title":"Definition"},{"location":"Reference/Settings/Color/#constructors","text":"Name Color() Color(ConsoleColor, ConsoleColor) ]","title":"Constructors"},{"location":"Reference/Settings/Color/#properties","text":"Name Type GET SET Background ConsoleColor Foreground ConsoleColor","title":"Properties"},{"location":"Reference/Settings/Color/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/Color/#color","text":"public Color () : this ( ConsoleColor . White , ConsoleColor . Black ) Initializes a new instance of the Color class.","title":"Color()"},{"location":"Reference/Settings/Color/#colorconsolecolor-consolecolor","text":"public Color ( ConsoleColor foreground = ConsoleColor . White , ConsoleColor background = ConsoleColor . Black ) Initializes a new instance of the Color class.","title":"Color(ConsoleColor, ConsoleColor)"},{"location":"Reference/Settings/Color/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/Color/#background","text":"public ConsoleColor Background { get ; set ; } Type: ConsoleColor Gets or sets the background color.","title":"Background"},{"location":"Reference/Settings/Color/#foreground","text":"public ConsoleColor Foreground { get ; set ; } Type: ConsoleColor Gets or sets the foreground color.","title":"Foreground"},{"location":"Reference/Settings/Level/","text":"Level Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class Level Object Level Class containing the settings for a log level. Constructors \u00b6 Name Level() Level(char, bool, string) ] Properties \u00b6 Name Type GET SET Enabled bool Format string Short char Constructors \u00b6 Level() \u00b6 public Level () : this ( '-' , true , null ) Initializes a new instance of the level class using default values. Level(char, bool, string) \u00b6 public Level ( char @short = '-' , bool enabled = true , string format = null ) Initializes a new instance of the Level class. Parameter \u00b6 @short char \u00b7 - The short for the log level. enabled bool \u00b7 true Wether the level is enabled. format string \u00b7 null The format. Properties \u00b6 Enabled \u00b6 public bool Enabled { get ; set ; } Type: bool Gets or sets a value indicating whether this level is enabled. Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the optional format. Short \u00b6 public char Short { get ; set ; } Type: char Gets or sets a char representing the log level.","title":"Level Class"},{"location":"Reference/Settings/Level/#level-class","text":"","title":"Level Class"},{"location":"Reference/Settings/Level/#definition","text":"namespace Sharplog.Settings public class Level Object Level Class containing the settings for a log level.","title":"Definition"},{"location":"Reference/Settings/Level/#constructors","text":"Name Level() Level(char, bool, string) ]","title":"Constructors"},{"location":"Reference/Settings/Level/#properties","text":"Name Type GET SET Enabled bool Format string Short char","title":"Properties"},{"location":"Reference/Settings/Level/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/Level/#level","text":"public Level () : this ( '-' , true , null ) Initializes a new instance of the level class using default values.","title":"Level()"},{"location":"Reference/Settings/Level/#levelchar-bool-string","text":"public Level ( char @short = '-' , bool enabled = true , string format = null ) Initializes a new instance of the Level class.","title":"Level(char, bool, string)"},{"location":"Reference/Settings/Level/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/Level/#enabled","text":"public bool Enabled { get ; set ; } Type: bool Gets or sets a value indicating whether this level is enabled.","title":"Enabled"},{"location":"Reference/Settings/Level/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the optional format.","title":"Format"},{"location":"Reference/Settings/Level/#short","text":"public char Short { get ; set ; } Type: char Gets or sets a char representing the log level.","title":"Short"},{"location":"Reference/Settings/LevelContainer/","text":"LevelContainer Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class LevelContainer Object LevelContainer Container for all log level specific settings. Constructors \u00b6 Name LevelContainer() LevelContainer(Level, Level, Level, Level, Level, Level) ] Properties \u00b6 Name Type GET SET Debug Level Trace Level Info Level Warn Level Error Level Fatal Level Methods \u00b6 Name Modifiers Returns GetLevel(LogLevel level) public Level Constructors \u00b6 LevelContainer() \u00b6 public LevelContainer () : this ( null , null , null , null , null , null ) Initializes a new instance of the LevelContainer class. LevelContainer(Level, Level, Level, Level, Level, Level) \u00b6 public LevelContainer ( Level debug = null , Level trace = null , Level info = null , Level warn = null , Level error = null , Level fatal = null ) Initializes a new instance of the LevelContainer class. Parameter \u00b6 debug Level \u00b7 null The debug settings. trace Level \u00b7 null The trace settings. info Level \u00b7 null The info settings. warn Level \u00b7 null The warning settings. error Level \u00b7 null The error settings. fatal Level \u00b7 null The fatal settings. Properties \u00b6 Debug \u00b6 public Level Debug { get ; set ; } Type: Level Gets or sets the settings for the log level debug . Trace \u00b6 public Level Trace { get ; set ; } Type: Level Gets or sets the settings for the log level trace . Info \u00b6 public Level Info { get ; set ; } Type: Level Gets or sets the settings for the log level info . Warn \u00b6 public Level Warn { get ; set ; } Type: Level Gets or sets the settings for the log level warn . Error \u00b6 public Level Error { get ; set ; } Type: Level Gets or sets the settings for the log level error . Fatal \u00b6 public Level Fatal { get ; set ; } Type: Level Gets or sets the settings for the log level fatal . Methods \u00b6 GetLevel(LogLevel) \u00b6 public Level GetLevel ( LogLevel level ) Gets the settings for a level. Parameter \u00b6 level LogLevel \u00b7 The level the settings should be returned from. Returns \u00b6 Type: Level The requested settings.","title":"LevelContainer Class"},{"location":"Reference/Settings/LevelContainer/#levelcontainer-class","text":"","title":"LevelContainer Class"},{"location":"Reference/Settings/LevelContainer/#definition","text":"namespace Sharplog.Settings public class LevelContainer Object LevelContainer Container for all log level specific settings.","title":"Definition"},{"location":"Reference/Settings/LevelContainer/#constructors","text":"Name LevelContainer() LevelContainer(Level, Level, Level, Level, Level, Level) ]","title":"Constructors"},{"location":"Reference/Settings/LevelContainer/#properties","text":"Name Type GET SET Debug Level Trace Level Info Level Warn Level Error Level Fatal Level","title":"Properties"},{"location":"Reference/Settings/LevelContainer/#methods","text":"Name Modifiers Returns GetLevel(LogLevel level) public Level","title":"Methods"},{"location":"Reference/Settings/LevelContainer/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/LevelContainer/#levelcontainer","text":"public LevelContainer () : this ( null , null , null , null , null , null ) Initializes a new instance of the LevelContainer class.","title":"LevelContainer()"},{"location":"Reference/Settings/LevelContainer/#levelcontainerlevel-level-level-level-level-level","text":"public LevelContainer ( Level debug = null , Level trace = null , Level info = null , Level warn = null , Level error = null , Level fatal = null ) Initializes a new instance of the LevelContainer class.","title":"LevelContainer(Level, Level, Level, Level, Level, Level)"},{"location":"Reference/Settings/LevelContainer/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/LevelContainer/#debug","text":"public Level Debug { get ; set ; } Type: Level Gets or sets the settings for the log level debug .","title":"Debug"},{"location":"Reference/Settings/LevelContainer/#trace","text":"public Level Trace { get ; set ; } Type: Level Gets or sets the settings for the log level trace .","title":"Trace"},{"location":"Reference/Settings/LevelContainer/#info","text":"public Level Info { get ; set ; } Type: Level Gets or sets the settings for the log level info .","title":"Info"},{"location":"Reference/Settings/LevelContainer/#warn","text":"public Level Warn { get ; set ; } Type: Level Gets or sets the settings for the log level warn .","title":"Warn"},{"location":"Reference/Settings/LevelContainer/#error","text":"public Level Error { get ; set ; } Type: Level Gets or sets the settings for the log level error .","title":"Error"},{"location":"Reference/Settings/LevelContainer/#fatal","text":"public Level Fatal { get ; set ; } Type: Level Gets or sets the settings for the log level fatal .","title":"Fatal"},{"location":"Reference/Settings/LevelContainer/#methods_1","text":"","title":"Methods"},{"location":"Reference/Settings/LevelContainer/#getlevelloglevel","text":"public Level GetLevel ( LogLevel level ) Gets the settings for a level.","title":"GetLevel(LogLevel)"},{"location":"Reference/Settings/OutputContainer/","text":"OutputContainer Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class OutputContainer : IDisposable Object OutputContainer Implements : System.IDisposable Container for the output settings. Constructors \u00b6 Name OutputContainer() OutputContainer(ConsoleOutput, FileOutput, List< Output >) Properties \u00b6 Name Type GET SET Console ConsoleOutput File FileOutput Inherited methods \u00b6 Name Modifiers Returns Dispose() public Methods \u00b6 Name Modifiers Returns AddOutput(Output) public RemoveOutput(Output) public GetOutputs() public Output[] Constructors \u00b6 OutputContainer() \u00b6 public OutputContainer () : this ( null , null , null ) Initializes a new instance of the OutputContainer class using default settings if not provided. OutputContainer(ConsoleOutput, FileOutput, List< Output >) \u00b6 public OutputContainer ( ConsoleOutput console = null , FileOutput file = null , List < Output > outputs = null ) Initializes a new instance of the OutputContainer class using default settings if not provided. Parameter \u00b6 console ConsoleOutput \u00b7 null The console output. file FileOutput \u00b7 null The file output. outputs List< Output > \u00b7 null The output list. Properties \u00b6 Console \u00b6 public ConsoleOutput Console { get ; set ; } Type: ConsoleOutput Gets or sets the console output. File \u00b6 public FileOutput File { get ; set ; } Type: FileOutput Gets or sets the file output. Methods \u00b6 AddOutput(Output) \u00b6 public void AddOutput ( Output output ) Adds an output and starts it if needed. Parameter \u00b6 output Output \u00b7 The output. RemoveOutput(Output) \u00b6 public void RemoveOutput ( Output output ) Removes and disposes an output. Parameter \u00b6 output Output \u00b7 The output. GetOutputs() \u00b6 public Output [] GetOutputs () Get the list with outputs. Returns \u00b6 Type: Output[] Array containing the outputs.","title":"OutputContainer Class"},{"location":"Reference/Settings/OutputContainer/#outputcontainer-class","text":"","title":"OutputContainer Class"},{"location":"Reference/Settings/OutputContainer/#definition","text":"namespace Sharplog.Settings public class OutputContainer : IDisposable Object OutputContainer Implements : System.IDisposable Container for the output settings.","title":"Definition"},{"location":"Reference/Settings/OutputContainer/#constructors","text":"Name OutputContainer() OutputContainer(ConsoleOutput, FileOutput, List< Output >)","title":"Constructors"},{"location":"Reference/Settings/OutputContainer/#properties","text":"Name Type GET SET Console ConsoleOutput File FileOutput","title":"Properties"},{"location":"Reference/Settings/OutputContainer/#inherited-methods","text":"Name Modifiers Returns Dispose() public","title":"Inherited methods"},{"location":"Reference/Settings/OutputContainer/#methods","text":"Name Modifiers Returns AddOutput(Output) public RemoveOutput(Output) public GetOutputs() public Output[]","title":"Methods"},{"location":"Reference/Settings/OutputContainer/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/OutputContainer/#outputcontainer","text":"public OutputContainer () : this ( null , null , null ) Initializes a new instance of the OutputContainer class using default settings if not provided.","title":"OutputContainer()"},{"location":"Reference/Settings/OutputContainer/#outputcontainerconsoleoutput-fileoutput-list-output","text":"public OutputContainer ( ConsoleOutput console = null , FileOutput file = null , List < Output > outputs = null ) Initializes a new instance of the OutputContainer class using default settings if not provided.","title":"OutputContainer(ConsoleOutput, FileOutput, List&lt; Output &gt;)"},{"location":"Reference/Settings/OutputContainer/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/OutputContainer/#console","text":"public ConsoleOutput Console { get ; set ; } Type: ConsoleOutput Gets or sets the console output.","title":"Console"},{"location":"Reference/Settings/OutputContainer/#file","text":"public FileOutput File { get ; set ; } Type: FileOutput Gets or sets the file output.","title":"File"},{"location":"Reference/Settings/OutputContainer/#methods_1","text":"","title":"Methods"},{"location":"Reference/Settings/OutputContainer/#addoutputoutput","text":"public void AddOutput ( Output output ) Adds an output and starts it if needed.","title":"AddOutput(Output)"},{"location":"Reference/Settings/OutputContainer/#removeoutputoutput","text":"public void RemoveOutput ( Output output ) Removes and disposes an output.","title":"RemoveOutput(Output)"},{"location":"Reference/Settings/OutputContainer/#getoutputs","text":"public Output [] GetOutputs () Get the list with outputs.","title":"GetOutputs()"},{"location":"Reference/Settings/Tag/","text":"Tag Class \u00b6 Definition \u00b6 namespace Sharplog.Settings public class Tag : IDisposable Object Tag Implements : System.IDisposable Class containing settings of a tag. Constructors \u00b6 Name Tag() Tag(bool, string, LevelContainer, OutputContainer) Properties \u00b6 Name Type GET SET Enabled bool Format string Levels LevelContainer Outputs OutputContainer Inherited methods \u00b6 Name Modifiers Returns Dispose() public Constructors \u00b6 Tag() \u00b6 public Tag () : this ( true , null , null , null ) Initializes a new instance of the Tag class using default settings if not provided. Tag(bool, string, LevelContainer, OutputContainer) \u00b6 public Tag ( bool enabled = true , string format = null , LevelContainer levels = null , OutputContainer outputs = null ) Initializes a new instance of the Tag class using default settings if not provided. Parameter \u00b6 enabled bool \u00b7 true Wether the tag is enabled. format string \u00b7 null The format. levels LevelContainer \u00b7 null The levels. outputs OutputContainer \u00b7 null The outputs. Properties \u00b6 Enabled \u00b6 public bool Enabled { get ; set ; } Type: bool Gets or sets a value indicating whether this tag is enabled. Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the format. Levels \u00b6 public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the level settings. Outputs \u00b6 public OutputContainer Outputs { get ; set ; } Type: OutputContainer Gets or sets the outputs.","title":"Tag Class"},{"location":"Reference/Settings/Tag/#tag-class","text":"","title":"Tag Class"},{"location":"Reference/Settings/Tag/#definition","text":"namespace Sharplog.Settings public class Tag : IDisposable Object Tag Implements : System.IDisposable Class containing settings of a tag.","title":"Definition"},{"location":"Reference/Settings/Tag/#constructors","text":"Name Tag() Tag(bool, string, LevelContainer, OutputContainer)","title":"Constructors"},{"location":"Reference/Settings/Tag/#properties","text":"Name Type GET SET Enabled bool Format string Levels LevelContainer Outputs OutputContainer","title":"Properties"},{"location":"Reference/Settings/Tag/#inherited-methods","text":"Name Modifiers Returns Dispose() public","title":"Inherited methods"},{"location":"Reference/Settings/Tag/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Settings/Tag/#tag","text":"public Tag () : this ( true , null , null , null ) Initializes a new instance of the Tag class using default settings if not provided.","title":"Tag()"},{"location":"Reference/Settings/Tag/#tagbool-string-levelcontainer-outputcontainer","text":"public Tag ( bool enabled = true , string format = null , LevelContainer levels = null , OutputContainer outputs = null ) Initializes a new instance of the Tag class using default settings if not provided.","title":"Tag(bool, string, LevelContainer, OutputContainer)"},{"location":"Reference/Settings/Tag/#properties_1","text":"","title":"Properties"},{"location":"Reference/Settings/Tag/#enabled","text":"public bool Enabled { get ; set ; } Type: bool Gets or sets a value indicating whether this tag is enabled.","title":"Enabled"},{"location":"Reference/Settings/Tag/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the format.","title":"Format"},{"location":"Reference/Settings/Tag/#levels","text":"public LevelContainer Levels { get ; set ; } Type: LevelContainer Gets or sets the level settings.","title":"Levels"},{"location":"Reference/Settings/Tag/#outputs","text":"public OutputContainer Outputs { get ; set ; } Type: OutputContainer Gets or sets the outputs.","title":"Outputs"}]}