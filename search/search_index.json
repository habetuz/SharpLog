{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference . Features \u00b6 Easy to use Asynchronous logging File and console outputs integrated Easy to implement custom outputs Easy toggling of log levels Example \u00b6 Example log from GameSense . [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs | 16x Left | 3x Space | 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions | 1x /game_metadata | 1x /bind_game_event | 8x /register_game_event | 4692x /multiple_game_events | 29x /game_heartbeat","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Getting started . Full documentation under Reference .","title":"Welcome to SharpLog"},{"location":"#features","text":"Easy to use Asynchronous logging File and console outputs integrated Easy to implement custom outputs Easy toggling of log levels","title":"Features"},{"location":"#example","text":"Example log from GameSense . [10-07-2021 | 12:19:42.472] [Info] [Main]: Program started. Welcome. [10-07-2021 | 12:19:42.489] [Info] [GameSense/Controller]: Background set. [10-07-2021 | 12:19:42.504] [Info] [GameSense/Controller]: Mouse animation set. [10-07-2021 | 12:19:42.584] [Info] [GameSense/InputManager]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/InputManager]: Ready! [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Name set: KALE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Display name set: KaLE [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Developer set: Marvin Fuchs [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Starting... [10-07-2021 | 12:19:42.596] [Info] [GameSense/Controller]: Registering game... [10-07-2021 | 12:19:42.820] [Info] [GameSense/Transmitter]: Starting... [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: GameSense server is running on 127.0.0.1:49748 [10-07-2021 | 12:19:43.119] [Info] [GameSense/Transmitter]: Ready! [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Heartbeat started. [10-07-2021 | 12:19:43.424] [Info] [GameSense/Controller]: Binding events... [10-07-2021 | 12:19:43.449] [Info] [GameSense/Controller]: Keyboard event binned! [10-07-2021 | 12:19:43.483] [Info] [GameSense/Controller]: Mouse events binned! [10-07-2021 | 12:19:43.484] [Info] [GameSense/Controller]: UpdateTimer ready. [10-07-2021 | 12:19:43.485] [Info] [GameSense/Controller]: Ready! [10-07-2021 | 12:24:42.590] [Info] [GameSense/InputManager]: Inputs | 16x Left | 3x Space | 1x Return [10-07-2021 | 12:24:42.734] [Info] [GameSense/Transmitter]: Transitions | 1x /game_metadata | 1x /bind_game_event | 8x /register_game_event | 4692x /multiple_game_events | 29x /game_heartbeat","title":"Example"},{"location":"Getting%20started/","text":"Getting started \u00b6 Installation \u00b6 Install the package from nuget . Usage \u00b6 Logger \u00b6 Create a new logger. Logger MyLogger = new Logger () { Ident = \"Test\" , LogFlags = LogType . Debug | LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } }; Default settings Ident = \"NoName\" , LogFlags = LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () }, Log to the console. MyLogger . Log ( \"Test\" , LogType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional When the level argument is left blank the logger automatically logs on level LogType . Debug MassLogger \u00b6 This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogFlags = LogType . Debug | LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings Ident = \"NoName\" , InfoLogText = \"\" , LogFlags = LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } LogType debug , warning and error get logged just like the normal Logger . MyMassLogger . Log ( \"Test\" , LogType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional Again, when the level argument is left blank the logger automatically logs on level LogType . Debug Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . MyLogger . Log ( Keyboard . pressedKey (), LogType . Info ); Output Every 30000 milliseconds: [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: | 63x Left | 16x Return | 39x LShiftKey | 12x RShiftKey | 39x Back | 28x Space | 36x LControlKey Note Note that InfoLogText was set to Keyboard inputs: in the constructor. When you want to log a info log instantly set the instant argument to true . MyLogger . Log ( \"Instant info\" , LogType . Info , true ); Output [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info Outputs \u00b6 On default Logger and MassLogger have their Outputs list filled with a ConsoleOutput . A ConsoleOutput logs to the console window and colors the different log levels. You can add one or multiple FileOutput to log to one or multiple files. Notice that outputs log every log level on default but you can restrict them to only some log levels with their LogFlags property.","title":"Getting started"},{"location":"Getting%20started/#getting-started","text":"","title":"Getting started"},{"location":"Getting%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Getting%20started/#usage","text":"","title":"Usage"},{"location":"Getting%20started/#logger","text":"Create a new logger. Logger MyLogger = new Logger () { Ident = \"Test\" , LogFlags = LogType . Debug | LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } }; Default settings Ident = \"NoName\" , LogFlags = LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () }, Log to the console. MyLogger . Log ( \"Test\" , LogType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional When the level argument is left blank the logger automatically logs on level LogType . Debug","title":"Logger"},{"location":"Getting%20started/#masslogger","text":"This is a special logger that is able to log a large quantity of logs compressed into a single log. Use it when logging the same type of info many times (like keyboard inputs or many server requests). Create a new logger. MassLogger MyMassLogger = new MassLogger ( 30000 ) { Ident = \"MassTest\" , InfoLogText = \"Keyboard inputs:\" LogFlags = LogType . Debug | LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } }; The 30000 specify that the logger prints his info logs every 30000 milliseconds. Default settings Ident = \"NoName\" , InfoLogText = \"\" , LogFlags = LogType . Info | LogType . Warning | LogType . Error , Outputs = new List < IOutput >() { new ConsoleOutput () } LogType debug , warning and error get logged just like the normal Logger . MyMassLogger . Log ( \"Test\" , LogType . Debug ); Output [04-07-2021 | 12:53:34.372] [Debug] [Test]: Test Debug is optional Again, when the level argument is left blank the logger automatically logs on level LogType . Debug Info-logs are special. Take this example: We want to log every key press on our keyboard, we can use the MassLogger . MyLogger . Log ( Keyboard . pressedKey (), LogType . Info ); Output Every 30000 milliseconds: [04-07-2021 | 12:55:34.372] [Info] [MassTest]: Keyboard inputs: | 63x Left | 16x Return | 39x LShiftKey | 12x RShiftKey | 39x Back | 28x Space | 36x LControlKey Note Note that InfoLogText was set to Keyboard inputs: in the constructor. When you want to log a info log instantly set the instant argument to true . MyLogger . Log ( \"Instant info\" , LogType . Info , true ); Output [04-07-2021 | 12:53:34.372] [Info] [MassTest]: Instant info","title":"MassLogger"},{"location":"Getting%20started/#outputs","text":"On default Logger and MassLogger have their Outputs list filled with a ConsoleOutput . A ConsoleOutput logs to the console window and colors the different log levels. You can add one or multiple FileOutput to log to one or multiple files. Notice that outputs log every log level on default but you can restrict them to only some log levels with their LogFlags property.","title":"Outputs"},{"location":"Reference/LogType/","text":"LogType \u00b6 Source namespace SharpLog public enum LogType All available logging levels. Fields \u00b6 Name Value Debug 1 Info 2 Warning 4 Error 8","title":"LogType"},{"location":"Reference/LogType/#logtype","text":"Source namespace SharpLog public enum LogType All available logging levels.","title":"LogType"},{"location":"Reference/LogType/#fields","text":"Name Value Debug 1 Info 2 Warning 4 Error 8","title":"Fields"},{"location":"Reference/Logger/","text":"Logger \u00b6 Source namespace SharpLog public class Logger Logger Class for easy but clear logging. Summary \u00b6 Constructors \u00b6 Constructor Logger () Properties \u00b6 Type Property Get Set string Ident List< IOutput > Outputs LogType LogFlags bool LogDebug bool LogInfo bool LogWarning bool LogError Methods \u00b6 Type Method void Log (object log, LogType type) Constructors \u00b6 Logger \u00b6 Source public Logger () Initializes a new instance of the Logger class. Properties \u00b6 Ident \u00b6 Source \u00b7 Default: \"NoName\" public string Ident { set ;} Sets the identification-tag of the logger. Outputs \u00b6 Source \u00b7 Default: List < IOutput > { new ConsoleOutput } public List < IOutput > Outputs { get ; set ; } List with all output sources the logger should write to. LogFlags \u00b6 Source \u00b7 Default: LogType . Info | LogType . Warning | LogType . Error public LogType LogFlags { get; set; } Sets or gets the LogType 's the logger should log. LogDebug \u00b6 Source \u00b7 Default: false public bool LogDebug { set ;} Sets a value indicating whether Debug should be logged. LogInfo \u00b6 Source \u00b7 Default: true public bool LogInfo { set ;} Sets a value indicating whether Info should be logged. LogWarning \u00b6 Source \u00b7 Default: true public bool LogWarning { set ;} Sets a value indicating whether Warning should be logged. LogError \u00b6 Source \u00b7 Default: true public bool LogError { set ;} Sets a value indicating whether Error should be logged. Methods \u00b6 Log \u00b6 Source public void Log ( object log , LogType type = LogType .Debug) Logs to the outputs specified in Outputs with time, origin and type information. Parameters \u00b6 Type Name Description Default object log The object to be logged LogType type The type of the log LogType .Debug","title":"Logger"},{"location":"Reference/Logger/#logger","text":"Source namespace SharpLog public class Logger Logger Class for easy but clear logging.","title":"Logger"},{"location":"Reference/Logger/#summary","text":"","title":"Summary"},{"location":"Reference/Logger/#constructors","text":"Constructor Logger ()","title":"Constructors"},{"location":"Reference/Logger/#properties","text":"Type Property Get Set string Ident List< IOutput > Outputs LogType LogFlags bool LogDebug bool LogInfo bool LogWarning bool LogError","title":"Properties"},{"location":"Reference/Logger/#methods","text":"Type Method void Log (object log, LogType type)","title":"Methods"},{"location":"Reference/Logger/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Logger/#logger_1","text":"Source public Logger () Initializes a new instance of the Logger class.","title":"Logger"},{"location":"Reference/Logger/#properties_1","text":"","title":"Properties"},{"location":"Reference/Logger/#ident","text":"Source \u00b7 Default: \"NoName\" public string Ident { set ;} Sets the identification-tag of the logger.","title":"Ident"},{"location":"Reference/Logger/#outputs","text":"Source \u00b7 Default: List < IOutput > { new ConsoleOutput } public List < IOutput > Outputs { get ; set ; } List with all output sources the logger should write to.","title":"Outputs"},{"location":"Reference/Logger/#logflags","text":"Source \u00b7 Default: LogType . Info | LogType . Warning | LogType . Error public LogType LogFlags { get; set; } Sets or gets the LogType 's the logger should log.","title":"LogFlags"},{"location":"Reference/Logger/#logdebug","text":"Source \u00b7 Default: false public bool LogDebug { set ;} Sets a value indicating whether Debug should be logged.","title":"LogDebug"},{"location":"Reference/Logger/#loginfo","text":"Source \u00b7 Default: true public bool LogInfo { set ;} Sets a value indicating whether Info should be logged.","title":"LogInfo"},{"location":"Reference/Logger/#logwarning","text":"Source \u00b7 Default: true public bool LogWarning { set ;} Sets a value indicating whether Warning should be logged.","title":"LogWarning"},{"location":"Reference/Logger/#logerror","text":"Source \u00b7 Default: true public bool LogError { set ;} Sets a value indicating whether Error should be logged.","title":"LogError"},{"location":"Reference/Logger/#methods_1","text":"","title":"Methods"},{"location":"Reference/Logger/#log","text":"Source public void Log ( object log , LogType type = LogType .Debug) Logs to the outputs specified in Outputs with time, origin and type information.","title":"Log"},{"location":"Reference/Logger/#parameters","text":"Type Name Description Default object log The object to be logged LogType type The type of the log LogType .Debug","title":"Parameters"},{"location":"Reference/MassLogger/","text":"MassLogger \u00b6 Source namespace SharpLog public class MassLogger Logger \u2002\u2002\u2002\u2002 MassLogger A logger to log a massive amount of similar info logs. It collects info logs and prints them out compressed at a set interval. Summary \u00b6 Constructors \u00b6 Constructor MassLogger (int logPause) Properties \u00b6 Type Property Get Set string InfoLogText Inherited properties from Logger \u00b6 Type Property Get Set string Ident List< IOutput > Outputs LogType LogFlags bool LogDebug bool LogInfo bool LogWarning bool LogError Methods \u00b6 Type Method void Log (object log, LogType type, bool instant) Constructors \u00b6 MassLogger \u00b6 Source public MassLogger ( int logPause ) Initializes a new instance of the MassLogger class. Parameters \u00b6 Type Name Description Default int logPause The interval time of the logger 30000 Properties \u00b6 InfoLogText \u00b6 Source \u00b7 Default: \"\" public string InfoLogText { get ; set ;} Gets or sets the text that is displayed before the info log. Methods \u00b6 Log \u00b6 Source public void Log ( object log , LogType type = LogType . Debug , bool instant = false ) Logs to the outputs specified in Outputs with time, origin and type information. Parameters \u00b6 Type Name Description Default object log The object to be logged LogType type The type of the log LogType .Debug bool instant If true, every log, and especially LogType .Info , gets logged instantly false","title":"MassLogger"},{"location":"Reference/MassLogger/#masslogger","text":"Source namespace SharpLog public class MassLogger Logger \u2002\u2002\u2002\u2002 MassLogger A logger to log a massive amount of similar info logs. It collects info logs and prints them out compressed at a set interval.","title":"MassLogger"},{"location":"Reference/MassLogger/#summary","text":"","title":"Summary"},{"location":"Reference/MassLogger/#constructors","text":"Constructor MassLogger (int logPause)","title":"Constructors"},{"location":"Reference/MassLogger/#properties","text":"Type Property Get Set string InfoLogText","title":"Properties"},{"location":"Reference/MassLogger/#inherited-properties-from-logger","text":"Type Property Get Set string Ident List< IOutput > Outputs LogType LogFlags bool LogDebug bool LogInfo bool LogWarning bool LogError","title":"Inherited properties from Logger"},{"location":"Reference/MassLogger/#methods","text":"Type Method void Log (object log, LogType type, bool instant)","title":"Methods"},{"location":"Reference/MassLogger/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/MassLogger/#masslogger_1","text":"Source public MassLogger ( int logPause ) Initializes a new instance of the MassLogger class.","title":"MassLogger"},{"location":"Reference/MassLogger/#parameters","text":"Type Name Description Default int logPause The interval time of the logger 30000","title":"Parameters"},{"location":"Reference/MassLogger/#properties_1","text":"","title":"Properties"},{"location":"Reference/MassLogger/#infologtext","text":"Source \u00b7 Default: \"\" public string InfoLogText { get ; set ;} Gets or sets the text that is displayed before the info log.","title":"InfoLogText"},{"location":"Reference/MassLogger/#methods_1","text":"","title":"Methods"},{"location":"Reference/MassLogger/#log","text":"Source public void Log ( object log , LogType type = LogType . Debug , bool instant = false ) Logs to the outputs specified in Outputs with time, origin and type information.","title":"Log"},{"location":"Reference/MassLogger/#parameters_1","text":"Type Name Description Default object log The object to be logged LogType type The type of the log LogType .Debug bool instant If true, every log, and especially LogType .Info , gets logged instantly false","title":"Parameters"},{"location":"Reference/Output/ConsoleOutput/","text":"ConsoleOutput \u00b6 Source namespace SharpLog.Output public class ConsoleOutput IOutput \u2002\u2002\u2002\u2002 ConsoleOutput Class for console outputs. Summary \u00b6 Constructors \u00b6 Constructor ConsoleOutput () Implemented properties from IOutput \u00b6 Type Property Get Set LogType LogFlags Implemented methods from IOutput \u00b6 Type Method void Write (string text, LogType logType) Constructors \u00b6 ConsoleOutput \u00b6 Source public ConsoleOutput () Initializes a new instance of the ConsoleOutput class. Methods \u00b6 Write \u00b6 Source void Write ( string text , LogType type) Writes text to the console. Parameters \u00b6 Type Name Description string text The text to be written LogType type The log level of the log","title":"ConsoleOutput"},{"location":"Reference/Output/ConsoleOutput/#consoleoutput","text":"Source namespace SharpLog.Output public class ConsoleOutput IOutput \u2002\u2002\u2002\u2002 ConsoleOutput Class for console outputs.","title":"ConsoleOutput"},{"location":"Reference/Output/ConsoleOutput/#summary","text":"","title":"Summary"},{"location":"Reference/Output/ConsoleOutput/#constructors","text":"Constructor ConsoleOutput ()","title":"Constructors"},{"location":"Reference/Output/ConsoleOutput/#implemented-properties-from-ioutput","text":"Type Property Get Set LogType LogFlags","title":"Implemented properties from IOutput"},{"location":"Reference/Output/ConsoleOutput/#implemented-methods-from-ioutput","text":"Type Method void Write (string text, LogType logType)","title":"Implemented methods from IOutput"},{"location":"Reference/Output/ConsoleOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Output/ConsoleOutput/#consoleoutput_1","text":"Source public ConsoleOutput () Initializes a new instance of the ConsoleOutput class.","title":"ConsoleOutput"},{"location":"Reference/Output/ConsoleOutput/#methods","text":"","title":"Methods"},{"location":"Reference/Output/ConsoleOutput/#write","text":"Source void Write ( string text , LogType type) Writes text to the console.","title":"Write"},{"location":"Reference/Output/ConsoleOutput/#parameters","text":"Type Name Description string text The text to be written LogType type The log level of the log","title":"Parameters"},{"location":"Reference/Output/FileOutput/","text":"FileOutput \u00b6 Source namespace SharpLog.Output public class FileOutput IOutput \u2002\u2002\u2002\u2002 FileOutput Class for file outputs. Summary \u00b6 Constructors \u00b6 Constructor FileOutput () Properties \u00b6 Type Property Get Set string FileName Implemented properties from IOutput \u00b6 Type Property Get Set LogType LogFlags Implemented methods from IOutput \u00b6 Type Method void Write (string text, LogType logType) Constructors \u00b6 FileOutput \u00b6 Source public FileOutput ( string fileName = \".log\" ) Initializes a new instance of the FileOutput class. Parameters \u00b6 Type Name Description Default string fileName The name or path of the file the output should write to \".log\" Properties \u00b6 FileName \u00b6 Source \u00b7 Default: \"NoName\" public string FileName { set ;} Sets the name or path of the file the output should write to. Methods \u00b6 Write \u00b6 Source void Write ( string text , LogType type) Writes text to a file. Parameters \u00b6 Type Name Description string text The text to be written LogType type The log level of the log","title":"FileOutput"},{"location":"Reference/Output/FileOutput/#fileoutput","text":"Source namespace SharpLog.Output public class FileOutput IOutput \u2002\u2002\u2002\u2002 FileOutput Class for file outputs.","title":"FileOutput"},{"location":"Reference/Output/FileOutput/#summary","text":"","title":"Summary"},{"location":"Reference/Output/FileOutput/#constructors","text":"Constructor FileOutput ()","title":"Constructors"},{"location":"Reference/Output/FileOutput/#properties","text":"Type Property Get Set string FileName","title":"Properties"},{"location":"Reference/Output/FileOutput/#implemented-properties-from-ioutput","text":"Type Property Get Set LogType LogFlags","title":"Implemented properties from IOutput"},{"location":"Reference/Output/FileOutput/#implemented-methods-from-ioutput","text":"Type Method void Write (string text, LogType logType)","title":"Implemented methods from IOutput"},{"location":"Reference/Output/FileOutput/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Output/FileOutput/#fileoutput_1","text":"Source public FileOutput ( string fileName = \".log\" ) Initializes a new instance of the FileOutput class.","title":"FileOutput"},{"location":"Reference/Output/FileOutput/#parameters","text":"Type Name Description Default string fileName The name or path of the file the output should write to \".log\"","title":"Parameters"},{"location":"Reference/Output/FileOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Output/FileOutput/#filename","text":"Source \u00b7 Default: \"NoName\" public string FileName { set ;} Sets the name or path of the file the output should write to.","title":"FileName"},{"location":"Reference/Output/FileOutput/#methods","text":"","title":"Methods"},{"location":"Reference/Output/FileOutput/#write","text":"Source void Write ( string text , LogType type) Writes text to a file.","title":"Write"},{"location":"Reference/Output/FileOutput/#parameters_1","text":"Type Name Description string text The text to be written LogType type The log level of the log","title":"Parameters"},{"location":"Reference/Output/IOutput/","text":"IOutput \u00b6 Source namespace SharpLog.Output public interface IOutput IOutput Interface for outputs used by logger. Summary \u00b6 Properties \u00b6 Type Property Get Set LogType LogFlags Methods \u00b6 Type Method void Write (string text, LogType logType) Properties \u00b6 LogFlags \u00b6 Source public string FileName { set ;} Sets or gets the LogType 's the output should log. Should be set to all log types on default. Methods \u00b6 Write \u00b6 Source LogType LogType { get; set; } Writes the text to the output. Parameters \u00b6 Type Name Description string text The text to be written LogType type The log level of the log","title":"IOutput"},{"location":"Reference/Output/IOutput/#ioutput","text":"Source namespace SharpLog.Output public interface IOutput IOutput Interface for outputs used by logger.","title":"IOutput"},{"location":"Reference/Output/IOutput/#summary","text":"","title":"Summary"},{"location":"Reference/Output/IOutput/#properties","text":"Type Property Get Set LogType LogFlags","title":"Properties"},{"location":"Reference/Output/IOutput/#methods","text":"Type Method void Write (string text, LogType logType)","title":"Methods"},{"location":"Reference/Output/IOutput/#properties_1","text":"","title":"Properties"},{"location":"Reference/Output/IOutput/#logflags","text":"Source public string FileName { set ;} Sets or gets the LogType 's the output should log. Should be set to all log types on default.","title":"LogFlags"},{"location":"Reference/Output/IOutput/#methods_1","text":"","title":"Methods"},{"location":"Reference/Output/IOutput/#write","text":"Source LogType LogType { get; set; } Writes the text to the output.","title":"Write"},{"location":"Reference/Output/IOutput/#parameters","text":"Type Name Description string text The text to be written LogType type The log level of the log","title":"Parameters"}]}