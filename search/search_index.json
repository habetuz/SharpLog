{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.0.* Features \u00b6 Fast and easy to use No setup required Easy to customize Outputs \u00b6 Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file! Example \u00b6 SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.0.*","title":"Welcome to SharpLog"},{"location":"#features","text":"Fast and easy to use No setup required Easy to customize","title":"Features"},{"location":"#outputs","text":"Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file!","title":"Outputs"},{"location":"#example","text":"SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Example"},{"location":"Get%20started/","text":"Installation \u00b6 Install the package from nuget . Usage \u00b6 Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" , typeof ( Program )); Logging . LogTrace ( \"Trace!\" , typeof ( Program )); Logging . LogInfo ( \"Info!\" , typeof ( Program )); Logging . LogWarning ( \"Warning!\" , typeof ( Program )); Logging . LogError ( \"Error!\" , typeof ( Program )); Logging . LogFatal ( \"Fatal!\" , typeof ( Program )); 24.04.2022 14:04:47: [Debug] [YourNamespace.Program] Debug! 24.04.2022 14:04:47: [Trace] [YourNamespace.Program] Trace! 24.04.2022 14:04:47: [Info] [YourNamespace.Program] Info! 24.04.2022 14:04:47: [Warn] [YourNamespace.Program] Warning! 24.04.2022 14:04:47: [Error] [YourNamespace.Program] Error! 24.04.2022 14:04:47: [Fatal] [YourNamespace.Program] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) string : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. The current stacktrace for better a better understanding what happened with your program. Exit your program correctly \u00b6 Warning If you do not exit your program correctly some of your logs may not be written to their desired outputs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Disposing the logger ensures that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" , typeof ( Program )); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Get started"},{"location":"Get%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Get%20started/#usage","text":"Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" , typeof ( Program )); Logging . LogTrace ( \"Trace!\" , typeof ( Program )); Logging . LogInfo ( \"Info!\" , typeof ( Program )); Logging . LogWarning ( \"Warning!\" , typeof ( Program )); Logging . LogError ( \"Error!\" , typeof ( Program )); Logging . LogFatal ( \"Fatal!\" , typeof ( Program )); 24.04.2022 14:04:47: [Debug] [YourNamespace.Program] Debug! 24.04.2022 14:04:47: [Trace] [YourNamespace.Program] Trace! 24.04.2022 14:04:47: [Info] [YourNamespace.Program] Info! 24.04.2022 14:04:47: [Warn] [YourNamespace.Program] Warning! 24.04.2022 14:04:47: [Error] [YourNamespace.Program] Error! 24.04.2022 14:04:47: [Fatal] [YourNamespace.Program] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) string : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. The current stacktrace for better a better understanding what happened with your program.","title":"Usage"},{"location":"Get%20started/#exit-your-program-correctly","text":"Warning If you do not exit your program correctly some of your logs may not be written to their desired outputs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Disposing the logger ensures that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" , typeof ( Program )); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Exit your program correctly"},{"location":"Customize/","text":"Either customize your logger by editing the sharplog.yml file or by modifying the SettingsManager.Settings property. One important customization option is the format of your log messages. Read here for more information about formatting. Set global format \u00b6 The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' SettingsManager . Settings . Format = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$\" Set the global level settings \u00b6 The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' )); Set global outputs \u00b6 The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer () Set a console output \u00b6 sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput () Set a file output \u00b6 sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput () Set a custom output \u00b6 Create a class that extends the Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ()) Set tag specific settings \u00b6 The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Customize"},{"location":"Customize/#set-global-format","text":"The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' SettingsManager . Settings . Format = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$\"","title":"Set global format"},{"location":"Customize/#set-the-global-level-settings","text":"The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' ));","title":"Set the global level settings"},{"location":"Customize/#set-global-outputs","text":"The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer ()","title":"Set global outputs"},{"location":"Customize/#set-a-console-output","text":"sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput ()","title":"Set a console output"},{"location":"Customize/#set-a-file-output","text":"sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput ()","title":"Set a file output"},{"location":"Customize/#set-a-custom-output","text":"Create a class that extends the Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ())","title":"Set a custom output"},{"location":"Customize/#set-tag-specific-settings","text":"The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Set tag specific settings"},{"location":"Customize/Default%20settings/","text":"sharplog.yml format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' levels : debug : short : '?' enabled : true format : null trace : short : '&' enabled : true format : null info : short : '+' enabled : true format : null warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null outputs : console : levels : null format : null color_enabled : true colors : debug : background : black foreground : darkGray trace : background : black foreground : white info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black file : levels : null format : null path : .log suspend_time : 500","title":"Default settings"},{"location":"Customize/Formatting/","text":"Specify the formatting of you logs using a string with placeholders that get replaced with information. A placeholder is build up the following: //(1) (4) (3) $ Da { yyyy '-' MM '-' dd 'T' HH ':' mm ':' ss } p { SomePrefix } s { SomeSuffix } $ // (2) (5) The capitalized letter specifies the type of the placeholder. The argument property. Each placeholder starts and ends with $ The prefix property. The suffix property. Tip To write $ to your log write $$ in your format string. Add up to three properties to each placeholder for more customization: Note Prefix and suffix properties cannot contain nested placeholders. Property Description p{...} Prefix that will be displayed before of the information. s{...} Suffix that will be displayed after the information. a{...} Arguments that some placeholders need to specify their formatting. List of placeholders \u00b6 Placeholder Description Arguments C The namespace and class of the source. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"Formatting"},{"location":"Customize/Formatting/#list-of-placeholders","text":"Placeholder Description Arguments C The namespace and class of the source. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"List of placeholders"},{"location":"Reference/","text":"Reference \u00b6 Reference for every public function, property and field of SharpLog ! Missing documentation The reference is not complete right now! Missing reference for namespaces sharpLog.outputs and sharplog.settings .","title":"Reference"},{"location":"Reference/#reference","text":"Reference for every public function, property and field of SharpLog ! Missing documentation The reference is not complete right now! Missing reference for namespaces sharpLog.outputs and sharplog.settings .","title":"Reference"},{"location":"Reference/Log/","text":"Log Struct \u00b6 Definition \u00b6 namespace Sharplog public struct Log Object ValueType \u2003\u2002 Log Struct containing all information for a log. Constructors \u00b6 Name Log(LogLevel, object, Type, string, Exception, Level, string, DateTime, string) Properties \u00b6 Name Type GET SET Level LogLevel Class Type Message object Tag string Exception Exception LevelSettings Level Format string Time DateTime StackTrace string Constructors \u00b6 Log(LogLevel, object, Type, string, Exception, Level, string, DateTime, string) \u00b6 public Log ( LogLevel level , object message , Type @class , string tag , Exception exception , Level levelSettings , string format , DateTime time , string stackTrace ) Initializes a new instance of the Log struct. Parameter \u00b6 level LogLevel \u00b7 The level. message object \u00b7 The message. @class Type \u00b7 The class. tag string \u00b7 The tag. exception Exception \u00b7 The exception. levelSettings Level \u00b7 The level settings. format string \u00b7 The format. time DateTime \u00b7 The time. stackTrace string \u00b7 The stackTrace. Properties \u00b6 Level \u00b6 public LogLevel Level { get ; set ; } Type: LogLevel Gets or sets the level of the log. Class \u00b6 public Type Class { get ; set ; } Type: Type Gets or sets the class from wich the log comes from. Message \u00b6 public object Message { get ; set ; } Type: object Gets or sets the message. Tag \u00b6 public string Tag { get ; set ; } Type: string Gets or sets the tag. Exception \u00b6 public Exception Exception { get ; set ; } Type: Exception Gets or sets the exception. Format \u00b6 public string Format { get ; set ; } Type: string Gets or sets the format of the log. LevelSettings \u00b6 public Level LevelSettings { get ; set ; } Type: Level Gets or sets the level settings. Time \u00b6 public DateTime Time { get ; set ; } Type: DateTime Gets or sets the level settings. StackTrace \u00b6 public string StackTrace { get ; set ; } Type: DateTime Gets or sets the stack trace.","title":"Log Struct"},{"location":"Reference/Log/#log-struct","text":"","title":"Log Struct"},{"location":"Reference/Log/#definition","text":"namespace Sharplog public struct Log Object ValueType \u2003\u2002 Log Struct containing all information for a log.","title":"Definition"},{"location":"Reference/Log/#constructors","text":"Name Log(LogLevel, object, Type, string, Exception, Level, string, DateTime, string)","title":"Constructors"},{"location":"Reference/Log/#properties","text":"Name Type GET SET Level LogLevel Class Type Message object Tag string Exception Exception LevelSettings Level Format string Time DateTime StackTrace string","title":"Properties"},{"location":"Reference/Log/#constructors_1","text":"","title":"Constructors"},{"location":"Reference/Log/#logloglevel-object-type-string-exception-level-string-datetime-string","text":"public Log ( LogLevel level , object message , Type @class , string tag , Exception exception , Level levelSettings , string format , DateTime time , string stackTrace ) Initializes a new instance of the Log struct.","title":"Log(LogLevel, object, Type, string, Exception, Level, string, DateTime, string)"},{"location":"Reference/Log/#properties_1","text":"","title":"Properties"},{"location":"Reference/Log/#level","text":"public LogLevel Level { get ; set ; } Type: LogLevel Gets or sets the level of the log.","title":"Level"},{"location":"Reference/Log/#class","text":"public Type Class { get ; set ; } Type: Type Gets or sets the class from wich the log comes from.","title":"Class"},{"location":"Reference/Log/#message","text":"public object Message { get ; set ; } Type: object Gets or sets the message.","title":"Message"},{"location":"Reference/Log/#tag","text":"public string Tag { get ; set ; } Type: string Gets or sets the tag.","title":"Tag"},{"location":"Reference/Log/#exception","text":"public Exception Exception { get ; set ; } Type: Exception Gets or sets the exception.","title":"Exception"},{"location":"Reference/Log/#format","text":"public string Format { get ; set ; } Type: string Gets or sets the format of the log.","title":"Format"},{"location":"Reference/Log/#levelsettings","text":"public Level LevelSettings { get ; set ; } Type: Level Gets or sets the level settings.","title":"LevelSettings"},{"location":"Reference/Log/#time","text":"public DateTime Time { get ; set ; } Type: DateTime Gets or sets the level settings.","title":"Time"},{"location":"Reference/Log/#stacktrace","text":"public string StackTrace { get ; set ; } Type: DateTime Gets or sets the stack trace.","title":"StackTrace"},{"location":"Reference/LogLevel/","text":"LogLevel Enum \u00b6 Definition \u00b6 namespace Sharplog public enum LogLevel Object ValueType \u2003\u2002 Enum \u2003\u2002\u2003\u2002 LogLevel Specifies the log level. Fields \u00b6 Name Value Description Debug 0 Level debug Trace 1 Level trace Info 2 Level info Warn 3 Level warning Error 4 Level error Fatal 5 Level fatal","title":"LogLevel Enum"},{"location":"Reference/LogLevel/#loglevel-enum","text":"","title":"LogLevel Enum"},{"location":"Reference/LogLevel/#definition","text":"namespace Sharplog public enum LogLevel Object ValueType \u2003\u2002 Enum \u2003\u2002\u2003\u2002 LogLevel Specifies the log level.","title":"Definition"},{"location":"Reference/LogLevel/#fields","text":"Name Value Description Debug 0 Level debug Trace 1 Level trace Info 2 Level info Warn 3 Level warning Error 4 Level error Fatal 5 Level fatal","title":"Fields"},{"location":"Reference/Logging/","text":"Logging Class \u00b6 Definition \u00b6 namespace Sharplog public static class Logging Object Logging Class responsible for logging. Methods \u00b6 Name Modifiers Returns Initialize() public static Dispose() public static Log(LogLevel, object, Type, string, Exception, string) public static LogDebug(object, Type, string, Exception, string) public static LogTrace(object, Type, string, Exception, string) public static LogInfo(object, Type, string, Exception, string) public static LogWarning(object, Type, string, Exception, string) public static LogError(object, Type, string, Exception, string) public static LogFatal(object, Type, string, Exception, string) public static Methods \u00b6 Initialize() \u00b6 public static void Initialize () Initializes the logger. The logger will automatically initialize itself with the first log function call. Use this function if you want to initialize before you start logging. Dispose() \u00b6 public static void Dispose () Releases resources and logs all remaining logs. Should be called before exiting the program. Log(LogLevel, object, Type, string, Exception, string) \u00b6 public static void Log ( LogLevel level , object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a log message containing the given information. Parameter \u00b6 level LogLevel \u00b7 The log level. If the level is LogLevel.Fatal the program ends with code 0 after logging all remaining logs. message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogDebug(object, Type, string, Exception, string) \u00b6 public static void LogDebug ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a debug log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogTrace(object, Type, string, Exception, string) \u00b6 public static void LogTrace ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a trace log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogInfo(object, Type, string, Exception, string) \u00b6 public static void LogInfo ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs an information log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogWarning(object, Type, string, Exception, string) \u00b6 public static void LogWarning ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a warning log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogError(object, Type, string, Exception, string) \u00b6 public static void LogError ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs an error log message. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace . LogFatal(object, Type, string, Exception, string) \u00b6 public static void LogFatal ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a fatal log message and exits the program with code 1. Parameter \u00b6 message object \u00b7 The message of the log. Gets converted to a string using .toString() . origin Type \u00b7 The origin log. tag string \u00b7 null The tag of the log. exception Exception \u00b7 null The exception of the log. stackTrace string \u00b7 null The current stack trace. Retrieve it using Environment.StackTrace .","title":"Logging Class"},{"location":"Reference/Logging/#logging-class","text":"","title":"Logging Class"},{"location":"Reference/Logging/#definition","text":"namespace Sharplog public static class Logging Object Logging Class responsible for logging.","title":"Definition"},{"location":"Reference/Logging/#methods","text":"Name Modifiers Returns Initialize() public static Dispose() public static Log(LogLevel, object, Type, string, Exception, string) public static LogDebug(object, Type, string, Exception, string) public static LogTrace(object, Type, string, Exception, string) public static LogInfo(object, Type, string, Exception, string) public static LogWarning(object, Type, string, Exception, string) public static LogError(object, Type, string, Exception, string) public static LogFatal(object, Type, string, Exception, string) public static","title":"Methods"},{"location":"Reference/Logging/#methods_1","text":"","title":"Methods"},{"location":"Reference/Logging/#initialize","text":"public static void Initialize () Initializes the logger. The logger will automatically initialize itself with the first log function call. Use this function if you want to initialize before you start logging.","title":"Initialize()"},{"location":"Reference/Logging/#dispose","text":"public static void Dispose () Releases resources and logs all remaining logs. Should be called before exiting the program.","title":"Dispose()"},{"location":"Reference/Logging/#logloglevel-object-type-string-exception-string","text":"public static void Log ( LogLevel level , object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a log message containing the given information.","title":"Log(LogLevel, object, Type, string, Exception, string)"},{"location":"Reference/Logging/#logdebugobject-type-string-exception-string","text":"public static void LogDebug ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a debug log message.","title":"LogDebug(object, Type, string, Exception, string)"},{"location":"Reference/Logging/#logtraceobject-type-string-exception-string","text":"public static void LogTrace ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a trace log message.","title":"LogTrace(object, Type, string, Exception, string)"},{"location":"Reference/Logging/#loginfoobject-type-string-exception-string","text":"public static void LogInfo ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs an information log message.","title":"LogInfo(object, Type, string, Exception, string)"},{"location":"Reference/Logging/#logwarningobject-type-string-exception-string","text":"public static void LogWarning ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a warning log message.","title":"LogWarning(object, Type, string, Exception, string)"},{"location":"Reference/Logging/#logerrorobject-type-string-exception-string","text":"public static void LogError ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs an error log message.","title":"LogError(object, Type, string, Exception, string)"},{"location":"Reference/Logging/#logfatalobject-type-string-exception-string","text":"public static void LogFatal ( object message , Type origin , string tag = null , Exception exception = null , string stackTrace = null ) Logs a fatal log message and exits the program with code 1.","title":"LogFatal(object, Type, string, Exception, string)"},{"location":"Reference/SettingsManager/","text":"SettingsManager Class \u00b6 Definition \u00b6 namespace Sharplog public static class SettingsManager Object SettingsManager Class responsible for managing the settings. Properties \u00b6 Name Type GET SET Settings BaseSettings Methods \u00b6 Name Modifiers Returns ReloadSettings(bool) public static Properties \u00b6 Settings \u00b6 public static BaseSettings Settings { get ; set ; } Type: BaseSettings Gets or sets the settings. Methods \u00b6 ReloadSettings(bool) \u00b6 public static void ReloadSettings ( bool fromFile = true ) Reloads the settings. Parameter \u00b6 fromFile bool \u00b7 true The message of the log. Gets converted to a string using .toString() .","title":"SettingsManager Class"},{"location":"Reference/SettingsManager/#settingsmanager-class","text":"","title":"SettingsManager Class"},{"location":"Reference/SettingsManager/#definition","text":"namespace Sharplog public static class SettingsManager Object SettingsManager Class responsible for managing the settings.","title":"Definition"},{"location":"Reference/SettingsManager/#properties","text":"Name Type GET SET Settings BaseSettings","title":"Properties"},{"location":"Reference/SettingsManager/#methods","text":"Name Modifiers Returns ReloadSettings(bool) public static","title":"Methods"},{"location":"Reference/SettingsManager/#properties_1","text":"","title":"Properties"},{"location":"Reference/SettingsManager/#settings","text":"public static BaseSettings Settings { get ; set ; } Type: BaseSettings Gets or sets the settings.","title":"Settings"},{"location":"Reference/SettingsManager/#methods_1","text":"","title":"Methods"},{"location":"Reference/SettingsManager/#reloadsettingsbool","text":"public static void ReloadSettings ( bool fromFile = true ) Reloads the settings.","title":"ReloadSettings(bool)"},{"location":"Reference/Outputs/","text":"Outputs \u00b6","title":"Outputs"},{"location":"Reference/Outputs/#outputs","text":"","title":"Outputs"},{"location":"Reference/Outputs/ConsoleOutput/","text":"","title":"ConsoleOutput"},{"location":"Reference/Outputs/FileOutput/","text":"","title":"FileOutput"},{"location":"Reference/Outputs/Output/","text":"","title":"Output"},{"location":"Reference/Settings/","text":"Settings \u00b6","title":"Settings"},{"location":"Reference/Settings/#settings","text":"","title":"Settings"},{"location":"Reference/Settings/BaseSettings/","text":"","title":"BaseSettings"},{"location":"Reference/Settings/Color/","text":"","title":"Color"},{"location":"Reference/Settings/Level/","text":"","title":"Level"},{"location":"Reference/Settings/LevelContainer/","text":"","title":"LevelContainer"},{"location":"Reference/Settings/OutputContainer/","text":"","title":"OutputContainer"},{"location":"Reference/Settings/Tag/","text":"","title":"Tag"}]}