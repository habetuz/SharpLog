{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SharpLog \u00b6 A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.0.* Features \u00b6 Fast and easy to use No setup required Easy to customize Outputs \u00b6 Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file! Example \u00b6 SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Home"},{"location":"#welcome-to-sharplog","text":"A small logger for big projects. Installation and usage under Get started . Full documentation under Reference . This documentation is up to date with version 3.0.*","title":"Welcome to SharpLog"},{"location":"#features","text":"Fast and easy to use No setup required Easy to customize","title":"Features"},{"location":"#outputs","text":"Outputs are used to display, pass or store your log messages. Sharplog can write to one ore multiple outputs. Some outputs are already provided out-of-the-box: Print your logs to the standard console including color coding! Store your logs in a log file without blocking the file!","title":"Outputs"},{"location":"#example","text":"SharpLog . Logging . LogDebug ( \"Debug!\" , typeof ( Program )); SharpLog . Logging . LogTrace ( \"Trace!\" , typeof ( Program )); SharpLog . Logging . LogInfo ( \"Info!\" , typeof ( Program )); SharpLog . Logging . LogWarning ( \"Warning!\" , typeof ( Program )); SharpLog . Logging . LogError ( \"Error!\" , typeof ( Program )); SharpLog . Logging . LogFatal ( //(1) \"Fatal!\" , typeof ( Program ), exception : new Exception ( \"Test\" ), stackTrace : new StackTrace ( true ). ToString ()); Exits program after logging your message.","title":"Example"},{"location":"Get%20started/","text":"Installation \u00b6 Install the package from nuget . Usage \u00b6 Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" , typeof ( Program )); Logging . LogTrace ( \"Trace!\" , typeof ( Program )); Logging . LogInfo ( \"Info!\" , typeof ( Program )); Logging . LogWarning ( \"Warning!\" , typeof ( Program )); Logging . LogError ( \"Error!\" , typeof ( Program )); Logging . LogFatal ( \"Fatal!\" , typeof ( Program )); 24.04.2022 14:04:47: [Debug] [YourNamespace.Program] Debug! 24.04.2022 14:04:47: [Trace] [YourNamespace.Program] Trace! 24.04.2022 14:04:47: [Info] [YourNamespace.Program] Info! 24.04.2022 14:04:47: [Warn] [YourNamespace.Program] Warning! 24.04.2022 14:04:47: [Error] [YourNamespace.Program] Error! 24.04.2022 14:04:47: [Fatal] [YourNamespace.Program] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) string : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. The current stacktrace for better a better understanding what happened with your program. Exit your program correctly \u00b6 Warning If you do not exit your program correctly some of your logs may not be written to their desired outputs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Disposing the logger ensures that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" , typeof ( Program )); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Get started"},{"location":"Get%20started/#installation","text":"Install the package from nuget .","title":"Installation"},{"location":"Get%20started/#usage","text":"Sharplog automatically tries to load the settings from sharplog.yml . A Yaml file containing all changes to the default settings you want to make. Read here how you can customize your logger! To log a message just use Logging . log ( LogLevel . Debug , \"Your Message\" , typeof ( YourClass )) or a log level specific logging method: Log level specific logging methods Logging . LogDebug ( \"Debug!\" , typeof ( Program )); Logging . LogTrace ( \"Trace!\" , typeof ( Program )); Logging . LogInfo ( \"Info!\" , typeof ( Program )); Logging . LogWarning ( \"Warning!\" , typeof ( Program )); Logging . LogError ( \"Error!\" , typeof ( Program )); Logging . LogFatal ( \"Fatal!\" , typeof ( Program )); 24.04.2022 14:04:47: [Debug] [YourNamespace.Program] Debug! 24.04.2022 14:04:47: [Trace] [YourNamespace.Program] Trace! 24.04.2022 14:04:47: [Info] [YourNamespace.Program] Info! 24.04.2022 14:04:47: [Warn] [YourNamespace.Program] Warning! 24.04.2022 14:04:47: [Error] [YourNamespace.Program] Error! 24.04.2022 14:04:47: [Fatal] [YourNamespace.Program] Fatal! Note that you can pass additional information for your log message: string : tag #(1) Exception : exception #(2) string : stacktrace #(3) The tag of the message to better organize your logs. An exception you want to log. The current stacktrace for better a better understanding what happened with your program.","title":"Usage"},{"location":"Get%20started/#exit-your-program-correctly","text":"Warning If you do not exit your program correctly some of your logs may not be written to their desired outputs! Some outputs (like the file output) write your logs asynchronously and therefore could need some time until they pick up your message to log it. Disposing the logger ensures that you wait until all messages are logged before your program exits. Possible ways of disposing the logger Logging . Dispose (); //(1) Logging . LogFatal ( \"Something went terribly wrong! We cannot continue the program.\" , typeof ( Program )); //(2) Halts the program until all log messages are written. Writes all log messages and then exits the program using Environment . Exit ( 1 )","title":"Exit your program correctly"},{"location":"Customize/","text":"Either customize your logger by editing the sharplog.yml file or by modifying the SettingsManager.Settings property. One important customization option is the format of your log messages. Read here for more information about formatting. Set global format \u00b6 The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' SettingsManager . Settings . Format = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$\" Set the global level settings \u00b6 The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' )); Set global outputs \u00b6 The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer () Set a console output \u00b6 sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput () Set a file output \u00b6 sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput () Set a custom output \u00b6 Create a class that extends the `Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ()) Set tag specific settings \u00b6 The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Customize"},{"location":"Customize/#set-global-format","text":"The global format gets used when there is no other format is provided. sharplog.yml C# format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' SettingsManager . Settings . Format = \"$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$\"","title":"Set global format"},{"location":"Customize/#set-the-global-level-settings","text":"The global level settings that get used when no other level setting is provided. Tip If you only want to change one or multiple level settings you only need to provide this level setting. The others still remain their default value. sharplog.yml C# levels : debug : short : '?' #(1) enabled : true format : null trace : short : '&' enabled : true #(2) format : null info : short : '+' enabled : true format : null #(3) warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null The short value is the char representation of the level. true if the level is enabled, else false . You can specify level specific formats that override the global format . SettingsManager . Settings . Levels = new LevelContainer ( debug : new Level ( '?' ), trace : new Level ( '&' ), info : new Level ( '+' ), warn : new Level ( '!' ), error : new Level ( 'x' ), fatal : new Level ( 'X' ));","title":"Set the global level settings"},{"location":"Customize/#set-global-outputs","text":"The global outputs get used if there is no tag that specifies outputs . Settings specified for an output have the highest priority and overwrite every other defined setting. On default only a console output is set, but you can also add a file output. sharplog.yml C# outputs : console : ... file : ... SettingsManager . Settings . Outputs = new OutputContainer ()","title":"Set global outputs"},{"location":"Customize/#set-a-console-output","text":"sharplog.yml C# Colors black blue cyan darkBlue darkCyan darkGray darkGreen darkMagenta darkRed darkYellow gray green magenta red white yellow console : levels : null #(1) format : null #(2) color_enabled : true #(3) colors : #(4) debug : background : black #(5) foreground : darkGray trace : background : black foreground : white #(6) info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. true if the output should log with color, else false . Colors for each level. Note that if no or only one color is provided for a level the default value from the level trace get used. The background color. black is \"transparent\". The foreground or font color. new ConsoleOutput ()","title":"Set a console output"},{"location":"Customize/#set-a-file-output","text":"sharplog.yml C# file : levels : null #(1) format : null #(2) path : .log #(3) suspend_time : 500 #(4) Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. A format for the output. The relativ or absolut path of the file the output writes to. The file output logs asynchronously and waits suspend_time milliseconds between checking for new log messages to write. new FileOutput ()","title":"Set a file output"},{"location":"Customize/#set-a-custom-output","text":"Create a class that extends the `Outputs.Output class. Synchronous Asynchronous class CustomOutput : SharpLog . Outputs . Output { public override void Write ( string formattedLog , Log log ) { //(1) } } Write the formatted log to your output. The log object contains all the information about the log. class CustomOutput : SharpLog . Outputs . AsyncOutput { public override void WriteNonBlocking (( string , Log )[] logs ) { //(1) } } Write the formatted logs to your output. This method gets called asynchronously. Now you have to add the output to an OutputContainer . General output Tag output SettingsManager . Settings . Outputs . AddOutput ( new CustomOutput ()) SettingsManager . Settings . Tags [ \"YOUR_TAG\" ]. Outputs . AddOutput ( new CustomOutput ())","title":"Set a custom output"},{"location":"Customize/#set-tag-specific-settings","text":"The tag specific settings get used when a matching tag is provided with the log message. These settings overwrite global format, level and output settings. sharplog.yml C# tags : YOUR_TAG : enabled : true #(1) format : null levels : null #(2) outputs : null anotherTag : #(3) enabled : true format : null #(4) levels : null outputs : null #(5) true if the tag is enabled, else false Level settings for the output. Read here for more information about level settings but note that levels that are left blank will fallback to the global level settings instead of receiving a default value. The format of your tag does not matter. A format for the tag. Outputs for the tag. Note that tag specific outputs replace the global outputs (instead of adding to them). SettingsManager . Settings . Tags [ \"YOUR_TAG\" ] = new Tag (); SettingsManager . Settings . Tags [ \"anotherTag\" ] = new Tag ();","title":"Set tag specific settings"},{"location":"Customize/Default%20settings/","text":"sharplog.yml format : '$D$: [$L$]$Cp{ [}s{] }$$Tp{ [}s{] }$ $M$$Ep{\\n}$$Sp{\\n}$' levels : debug : short : '?' enabled : true format : null trace : short : '&' enabled : true format : null info : short : '+' enabled : true format : null warn : short : '!' enabled : true format : null error : short : 'x' enabled : true format : null fatal : short : 'X' enabled : true format : null outputs : console : levels : null format : null color_enabled : true colors : debug : background : black foreground : darkGray trace : background : black foreground : white info : background : black foreground : green warn : background : black foreground : yellow error : background : black foreground : red fatal : background : red foreground : black file : levels : null format : null path : .log suspend_time : 500","title":"Default settings"},{"location":"Customize/Formatting/","text":"Specify the formatting of you logs using a string with placeholders that get replaced with information. A placeholder is build up the following: //(1) (4) (3) $ Da { yyyy '-' MM '-' dd 'T' HH ':' mm ':' ss } p { SomePrefix } s { SomeSuffix } $ // (2) (5) The capitalized letter specifies the type of the placeholder. The argument property. Each placeholder starts and ends with $ The prefix property. The suffix property. Tip To write $ to your log write $$ in your format string. Add up to three properties to each placeholder for more customization: Note Prefix and suffix properties cannot contain nested placeholders. Property Description p{...} Prefix that will be displayed before of the information. s{...} Suffix that will be displayed after the information. a{...} Arguments that some placeholders need to specify their formatting. List of placeholders \u00b6 Placeholder Description Arguments C The namespace and class of the source. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"Formatting"},{"location":"Customize/Formatting/#list-of-placeholders","text":"Placeholder Description Arguments C The namespace and class of the source. D The timestamp. Date and time format string or empty for standard format of your culture. E The exception of the log source if available. L The log level. l or empty for a written log level. s for the short form specified in the level settings . M The message. S The stack trace if available. T The tag if available.","title":"List of placeholders"},{"location":"Reference/","text":"Reference \u00b6 Todo The reference is currently not available.","title":"Reference"},{"location":"Reference/#reference","text":"Todo The reference is currently not available.","title":"Reference"},{"location":"Reference/Log/","text":"","title":"Log"},{"location":"Reference/LogLevel/","text":"","title":"LogLevel"},{"location":"Reference/Logging/","text":"","title":"Logging"},{"location":"Reference/SettingsManager/","text":"","title":"SettingsManager"},{"location":"Reference/Outputs/","text":"Outputs \u00b6","title":"Outputs"},{"location":"Reference/Outputs/#outputs","text":"","title":"Outputs"},{"location":"Reference/Outputs/ConsoleOutput/","text":"","title":"ConsoleOutput"},{"location":"Reference/Outputs/FileOutput/","text":"","title":"FileOutput"},{"location":"Reference/Outputs/Output/","text":"","title":"Output"},{"location":"Reference/Settings/","text":"Settings \u00b6","title":"Settings"},{"location":"Reference/Settings/#settings","text":"","title":"Settings"},{"location":"Reference/Settings/BaseSettings/","text":"","title":"BaseSettings"},{"location":"Reference/Settings/Color/","text":"","title":"Color"},{"location":"Reference/Settings/Level/","text":"","title":"Level"},{"location":"Reference/Settings/LevelContainer/","text":"","title":"LevelContainer"},{"location":"Reference/Settings/OutputContainer/","text":"","title":"OutputContainer"},{"location":"Reference/Settings/Tag/","text":"","title":"Tag"}]}